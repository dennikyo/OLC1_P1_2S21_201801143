
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\030\011\000\002\004\004\000\002" +
    "\022\004\000\002\022\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\033\004" +
    "\000\002\033\003\000\002\034\007\000\002\034\007\000" +
    "\002\034\007\000\002\034\006\000\002\045\006\000\002" +
    "\045\005\000\002\045\005\000\002\045\006\000\002\045" +
    "\005\000\002\045\006\000\002\045\006\000\002\046\005" +
    "\000\002\046\003\000\002\047\003\000\002\047\010\000" +
    "\002\047\007\000\002\050\016\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\004\000" +
    "\002\052\004\000\002\032\012\000\002\035\007\000\002" +
    "\036\012\000\002\040\010\000\002\037\007\000\002\041" +
    "\012\000\002\042\007\000\002\043\010\000\002\031\010" +
    "\000\002\031\010\000\002\031\007\000\002\031\007\000" +
    "\002\031\007\000\002\031\007\000\002\031\006\000\002" +
    "\021\006\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\011\000\002\023\005\000\002\023\005" +
    "\000\002\023\004\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\010\000\002" +
    "\023\007\000\002\023\010\000\002\023\007\000\002\023" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\032\005\001\002\000\004\002\237\001" +
    "\002\000\004\010\006\001\002\000\004\030\007\001\002" +
    "\000\024\010\023\033\030\034\014\035\032\036\024\040" +
    "\026\041\035\042\021\043\031\001\002\000\026\010\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\001\002\000\026\010\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\001\002\000\026\010\023\031\235\033\030" +
    "\034\014\035\032\036\024\040\026\041\035\042\021\043" +
    "\031\001\002\000\026\010\ufffa\031\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\001" +
    "\002\000\004\010\226\001\002\000\026\010\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\001\002\000\026\010\uffdb\031\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\001\002\000\026\010\uffd8\031\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\001" +
    "\002\000\026\010\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002\000" +
    "\004\030\217\001\002\000\026\010\ufff8\031\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\001\002\000\010\015\201\025\200\027\202\001\002" +
    "\000\006\025\164\037\165\001\002\000\026\010\uffda\031" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\001\002\000\004\025\062\001\002\000" +
    "\026\010\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\001\002\000\004\010" +
    "\056\001\002\000\004\025\052\001\002\000\004\010\042" +
    "\001\002\000\026\010\uffdc\031\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002" +
    "\000\026\010\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\004" +
    "\025\036\001\002\000\004\026\037\001\002\000\004\030" +
    "\040\001\002\000\004\031\041\001\002\000\026\010\uffcc" +
    "\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\001\002\000\004\027\043\001\002" +
    "\000\012\005\046\010\050\023\044\024\045\001\002\000" +
    "\004\015\ufff1\001\002\000\004\015\ufff2\001\002\000\004" +
    "\015\ufff3\001\002\000\004\015\051\001\002\000\004\015" +
    "\ufff0\001\002\000\026\010\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001" +
    "\002\000\004\026\053\001\002\000\004\030\054\001\002" +
    "\000\004\031\055\001\002\000\026\010\uffca\031\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\001\002\000\004\027\057\001\002\000\012\005" +
    "\046\010\050\023\044\024\045\001\002\000\004\015\061" +
    "\001\002\000\026\010\uffed\031\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\001\002" +
    "\000\012\010\070\033\064\034\066\035\067\001\002\000" +
    "\012\010\116\033\064\034\066\035\067\001\002\000\004" +
    "\010\110\001\002\000\012\010\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\001\002\000\004\010\100\001\002\000\004\010\074" +
    "\001\002\000\004\027\071\001\002\000\012\005\046\010" +
    "\050\023\044\024\045\001\002\000\004\015\073\001\002" +
    "\000\012\010\uffc1\033\uffc1\034\uffc1\035\uffc1\001\002\000" +
    "\004\027\075\001\002\000\012\005\046\010\050\023\044" +
    "\024\045\001\002\000\004\015\077\001\002\000\012\010" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\001\002\000\004\027\101" +
    "\001\002\000\012\005\046\010\103\023\044\024\045\001" +
    "\002\000\004\015\107\001\002\000\006\004\104\015\ufff0" +
    "\001\002\000\004\010\105\001\002\000\004\015\106\001" +
    "\002\000\012\010\uffbd\033\uffbd\034\uffbd\035\uffbd\001\002" +
    "\000\012\010\uffbf\033\uffbf\034\uffbf\035\uffbf\001\002\000" +
    "\004\027\111\001\002\000\012\005\046\010\050\023\044" +
    "\024\045\001\002\000\004\015\113\001\002\000\012\010" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\001\002\000\012\010\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\001\002\000\004\010\156\001" +
    "\002\000\022\004\120\010\126\013\121\027\117\050\123" +
    "\051\122\052\125\053\124\001\002\000\012\005\046\010" +
    "\146\023\044\024\045\001\002\000\004\004\145\001\002" +
    "\000\004\013\144\001\002\000\004\010\142\001\002\000" +
    "\004\010\140\001\002\000\012\005\046\010\050\023\131" +
    "\024\045\001\002\000\004\010\127\001\002\000\006\010" +
    "\uffba\026\uffba\001\002\000\004\015\130\001\002\000\006" +
    "\010\uffb6\026\uffb6\001\002\000\006\015\ufff1\054\134\001" +
    "\002\000\004\015\133\001\002\000\006\010\uffb9\026\uffb9" +
    "\001\002\000\004\010\135\001\002\000\004\051\136\001" +
    "\002\000\004\023\137\001\002\000\006\010\uffb1\026\uffb1" +
    "\001\002\000\004\015\141\001\002\000\006\010\uffb8\026" +
    "\uffb8\001\002\000\004\015\143\001\002\000\006\010\uffb7" +
    "\026\uffb7\001\002\000\006\010\uffbc\026\uffbc\001\002\000" +
    "\006\010\uffbb\026\uffbb\001\002\000\010\004\150\007\147" +
    "\015\ufff0\001\002\000\004\010\153\001\002\000\004\024" +
    "\151\001\002\000\010\010\uffb4\015\152\026\uffb4\001\002" +
    "\000\006\010\uffb5\026\uffb5\001\002\000\010\010\uffb2\015" +
    "\154\026\uffb2\001\002\000\006\010\uffb3\026\uffb3\001\002" +
    "\000\004\026\161\001\002\000\022\004\120\010\126\013" +
    "\121\027\157\050\123\051\122\052\125\053\124\001\002" +
    "\000\004\010\160\001\002\000\006\004\150\007\147\001" +
    "\002\000\004\030\162\001\002\000\004\031\163\001\002" +
    "\000\026\010\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\004" +
    "\026\172\001\002\000\004\025\166\001\002\000\004\026" +
    "\167\001\002\000\004\030\170\001\002\000\004\031\171" +
    "\001\002\000\026\010\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001\002" +
    "\000\004\030\173\001\002\000\004\031\174\001\002\000" +
    "\030\010\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\175\040\uffcf\041\uffcf\042\uffcf\043\uffcf\001\002\000" +
    "\004\030\176\001\002\000\004\031\177\001\002\000\026" +
    "\010\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\001\002\000\006\010\206" +
    "\026\205\001\002\000\026\010\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\001\002\000\012\005\046\010\050\023\044\024\045\001" +
    "\002\000\004\015\204\001\002\000\026\010\uffea\031\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\001\002\000\004\030\214\001\002\000\004" +
    "\026\207\001\002\000\004\030\210\001\002\000\012\010" +
    "\212\033\030\034\014\035\032\001\002\000\004\031\213" +
    "\001\002\000\004\027\202\001\002\000\026\010\ufff7\031" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\001\002\000\012\010\212\033\030\034" +
    "\014\035\032\001\002\000\004\031\216\001\002\000\026" +
    "\010\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\001\002\000\004\031\220" +
    "\001\002\000\004\041\221\001\002\000\004\025\222\001" +
    "\002\000\004\026\223\001\002\000\004\030\224\001\002" +
    "\000\004\031\225\001\002\000\026\010\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\001\002\000\004\027\227\001\002\000\012\005" +
    "\046\010\050\023\044\024\045\001\002\000\004\015\231" +
    "\001\002\000\026\010\uffec\031\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\001\002" +
    "\000\026\010\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\001\002\000\026" +
    "\010\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000\026\010\ufff9" +
    "\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\001\002\000\004\002\000\001\002" +
    "\000\026\010\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\011\004\007" +
    "\030\033\032\032\034\021\035\015\036\024\037\010\040" +
    "\016\041\017\042\026\043\014\051\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\231\030\235\032" +
    "\032\034\233\035\015\036\024\037\010\040\016\041\017" +
    "\042\026\043\014\051\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\064\022\062\001\001\000\006\021\113\023\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\154\001\001\000" +
    "\002\001\001\000\004\027\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= clase id llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= id para id parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O ::= deci 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // O ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O ::= digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIAS ::= VARIAS C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIAS ::= C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIANTES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIANTES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIANTES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIANTES ::= id menig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIANTES ::= id iguall O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIANTES ::= id menor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIANTES ::= id mayor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALORES ::= VALORES pyc VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES ::= VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOS ::= C 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOS ::= id igual id mas O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOS ::= consi para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRUEBA ::= lete id igual id pyc id mayig O pyc id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("PRUEBA",38, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS ::= FORMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS ::= IFMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS ::= IFELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS ::= WHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS ::= MIXELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= DOWHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= SWITCHMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= METODOVACIO 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMBILOS ::= mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SIMBILOS",40, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIMBILOS ::= menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SIMBILOS",40, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIMBILOS ::= mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SIMBILOS",40, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMBILOS ::= menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SIMBILOS",40, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FORMETOD ::= fory para DECLARACIONES OPERACIONES OPERACIONES parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IFMETOD ::= ife para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",27, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IFELSEMETOD ::= ife para parc llavea llavec elsi llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",28, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MIXELSEMETOD ::= ife elsi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",30, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILEMETOD ::= whi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",29, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DOWHILEMETOD ::= du llavea llavec whi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",31, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWITCHMETOD ::= swi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",32, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODOVACIO ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOVACIO",33, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODOS ::= id para id parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODOS ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODOS ::= id para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODOS ::= consi para id parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METODOS ::= id para cadena parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODOS ::= id para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODOS ::= id SIMBILOS O coma 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= lete id igual id mas id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACIONES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACIONES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACIONES ::= id id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACIONES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACIONES ::= id menor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACIONES ::= id menig id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACIONES ::= id mayor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACIONES ::= id igual id mas cadena pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACIONES ::= id igual id mas cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACIONES ::= id igual id por id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACIONES ::= id igual id por id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONES ::= id mayig digito and id menig digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
