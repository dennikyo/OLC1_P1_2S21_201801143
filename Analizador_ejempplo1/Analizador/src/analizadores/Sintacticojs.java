
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\030\011\000\002\004\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\033\004" +
    "\000\002\033\003\000\002\034\007\000\002\034\007\000" +
    "\002\034\007\000\002\034\006\000\002\045\006\000\002" +
    "\045\005\000\002\045\005\000\002\045\006\000\002\045" +
    "\005\000\002\045\006\000\002\045\006\000\002\046\005" +
    "\000\002\046\003\000\002\047\003\000\002\047\010\000" +
    "\002\047\007\000\002\031\010\000\002\031\010\000\002" +
    "\031\007\000\002\031\007\000\002\031\007\000\002\031" +
    "\007\000\002\022\004\000\002\022\003\000\002\021\006" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\021\011\000\002\024\004\000\002\024\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\010\000\002\023\007\000\002\023\010\000" +
    "\002\023\007\000\002\023\011\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\032\013\000\002\035\011\000\002\036\014\000" +
    "\002\040\012\000\002\037\011\000\002\041\015\000\002" +
    "\042\011\000\002\043\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\032\005\001\002\000\004\002\260\001" +
    "\002\000\004\010\006\001\002\000\004\030\007\001\002" +
    "\000\024\010\024\033\031\034\014\035\033\036\025\040" +
    "\027\041\036\042\022\043\032\001\002\000\026\010\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\001\002\000\026\010\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\001\002\000\026\010\024\031\257\033\031" +
    "\034\014\035\033\036\025\040\027\041\036\042\022\043" +
    "\032\001\002\000\026\010\ufffa\031\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\001" +
    "\002\000\004\010\253\001\002\000\026\010\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\001\002\000\026\010\ufff6\031\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\001\002\000\026\010\uffc1\031\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\001" +
    "\002\000\026\010\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\026\010\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\001\002\000\004\030" +
    "\241\001\002\000\026\010\ufff8\031\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\001" +
    "\002\000\026\004\043\010\051\013\045\015\221\025\223" +
    "\027\222\050\046\051\044\052\050\053\047\001\002\000" +
    "\006\025\177\037\200\001\002\000\026\010\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\001\002\000\004\025\133\001\002\000\026" +
    "\010\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\001\002\000\004\010\127" +
    "\001\002\000\004\025\121\001\002\000\004\010\114\001" +
    "\002\000\026\010\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002\000" +
    "\026\010\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\004\025" +
    "\037\001\002\000\004\010\041\001\002\000\004\026\103" +
    "\001\002\000\022\004\043\010\051\013\045\027\042\050" +
    "\046\051\044\052\050\053\047\001\002\000\004\010\074" +
    "\001\002\000\004\004\073\001\002\000\004\010\071\001" +
    "\002\000\004\013\070\001\002\000\004\010\066\001\002" +
    "\000\012\005\056\010\060\023\054\024\055\001\002\000" +
    "\004\010\052\001\002\000\030\010\uffcc\026\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\001\002\000\004\015\053\001\002\000\030" +
    "\010\uffc8\026\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\001\002\000\006" +
    "\015\ufff1\054\062\001\002\000\004\015\ufff2\001\002\000" +
    "\004\015\ufff3\001\002\000\004\015\061\001\002\000\004" +
    "\015\ufff0\001\002\000\030\010\uffcb\026\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\001\002\000\004\010\063\001\002\000\004\051" +
    "\064\001\002\000\004\023\065\001\002\000\030\010\uffc3" +
    "\026\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\001\002\000\004\015\067" +
    "\001\002\000\030\010\uffca\026\uffca\031\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\001\002\000\030\010\uffce\026\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\001\002\000\004\015\072\001\002\000\030\010\uffc9\026" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\001\002\000\030\010\uffcd\026" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\001\002\000\006\004\076\007" +
    "\075\001\002\000\004\010\101\001\002\000\004\024\077" +
    "\001\002\000\032\010\uffc6\015\100\026\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\001\002\000\030\010\uffc7\026\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\001\002\000\032\010\uffc4\015\102\026\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\001\002\000\030\010\uffc5\026\uffc5\031" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\001\002\000\004\030\104\001\002\000" +
    "\024\010\024\033\031\034\014\035\033\036\025\040\027" +
    "\041\036\042\022\043\032\001\002\000\026\010\024\031" +
    "\112\033\031\034\014\035\033\036\025\040\027\041\036" +
    "\042\022\043\032\001\002\000\026\010\uffff\031\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\001\002\000\026\010\ufffb\031\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\001\002\000\026\010\ufff7\031\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\001\002" +
    "\000\026\010\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\001\002\000\026" +
    "\010\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\001\002\000\026\010\ufffd" +
    "\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\001\002\000\004\027\115\001\002" +
    "\000\012\005\056\010\060\023\116\024\055\001\002\000" +
    "\004\015\ufff1\001\002\000\004\015\120\001\002\000\026" +
    "\010\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002\000\004\010\041" +
    "\001\002\000\004\026\123\001\002\000\004\030\124\001" +
    "\002\000\024\010\024\033\031\034\014\035\033\036\025" +
    "\040\027\041\036\042\022\043\032\001\002\000\026\010" +
    "\024\031\126\033\031\034\014\035\033\036\025\040\027" +
    "\041\036\042\022\043\032\001\002\000\026\010\uffb4\031" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\001\002\000\004\027\130\001\002\000" +
    "\012\005\056\010\060\023\116\024\055\001\002\000\004" +
    "\015\132\001\002\000\026\010\uffed\031\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\001\002\000\012\010\141\033\135\034\137\035\140\001" +
    "\002\000\012\010\167\033\135\034\137\035\140\001\002" +
    "\000\004\010\161\001\002\000\014\010\uffd6\031\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\001\002\000\004\010\151\001\002" +
    "\000\004\010\145\001\002\000\004\027\142\001\002\000" +
    "\012\005\056\010\060\023\116\024\055\001\002\000\004" +
    "\015\144\001\002\000\014\010\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\001\002\000\004\027\146\001\002\000\012" +
    "\005\056\010\060\023\116\024\055\001\002\000\004\015" +
    "\150\001\002\000\014\010\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\001\002\000\004\027\152\001\002\000\012\005" +
    "\056\010\154\023\116\024\055\001\002\000\004\015\160" +
    "\001\002\000\006\004\155\015\ufff0\001\002\000\004\010" +
    "\156\001\002\000\004\015\157\001\002\000\014\010\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002\000\014\010" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\004" +
    "\027\162\001\002\000\012\005\056\010\060\023\116\024" +
    "\055\001\002\000\004\015\164\001\002\000\014\010\uffd4" +
    "\031\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000\014\010" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\001\002\000\004" +
    "\010\041\001\002\000\022\004\043\010\051\013\045\027" +
    "\170\050\046\051\044\052\050\053\047\001\002\000\012" +
    "\005\056\010\171\023\116\024\055\001\002\000\010\004" +
    "\076\007\075\015\ufff0\001\002\000\004\026\173\001\002" +
    "\000\004\030\174\001\002\000\024\010\024\033\031\034" +
    "\014\035\033\036\025\040\027\041\036\042\022\043\032" +
    "\001\002\000\026\010\024\031\176\033\031\034\014\035" +
    "\033\036\025\040\027\041\036\042\022\043\032\001\002" +
    "\000\026\010\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\001\002\000\004" +
    "\010\041\001\002\000\004\025\201\001\002\000\004\010" +
    "\041\001\002\000\004\026\203\001\002\000\004\030\204" +
    "\001\002\000\024\010\024\033\031\034\014\035\033\036" +
    "\025\040\027\041\036\042\022\043\032\001\002\000\026" +
    "\010\024\031\206\033\031\034\014\035\033\036\025\040" +
    "\027\041\036\042\022\043\032\001\002\000\026\010\uffb7" +
    "\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\001\002\000\004\026\210\001\002" +
    "\000\004\030\211\001\002\000\026\010\024\031\213\033" +
    "\031\034\014\035\033\036\025\040\027\041\036\042\022" +
    "\043\032\001\002\000\026\010\024\031\220\033\031\034" +
    "\014\035\033\036\025\040\027\041\036\042\022\043\032" +
    "\001\002\000\004\037\214\001\002\000\004\030\215\001" +
    "\002\000\024\010\024\033\031\034\014\035\033\036\025" +
    "\040\027\041\036\042\022\043\032\001\002\000\026\010" +
    "\024\031\217\033\031\034\014\035\033\036\025\040\027" +
    "\041\036\042\022\043\032\001\002\000\026\010\uffb8\031" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\001\002\000\026\010\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\001\002\000\026\010\ufff4\031\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\001\002\000\012\005\056\010\171\023\116\024\055\001" +
    "\002\000\006\010\225\026\224\001\002\000\004\030\232" +
    "\001\002\000\004\026\226\001\002\000\004\030\227\001" +
    "\002\000\024\010\024\033\031\034\014\035\033\036\025" +
    "\040\027\041\036\042\022\043\032\001\002\000\026\010" +
    "\024\031\231\033\031\034\014\035\033\036\025\040\027" +
    "\041\036\042\022\043\032\001\002\000\026\010\ufff5\031" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\001\002\000\012\010\234\033\031\034" +
    "\014\035\033\001\002\000\004\031\240\001\002\000\004" +
    "\027\235\001\002\000\012\005\056\010\060\023\116\024" +
    "\055\001\002\000\004\015\237\001\002\000\026\010\uffea" +
    "\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\001\002\000\026\010\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\001\002\000\012\010\141\033\135\034\137" +
    "\035\140\001\002\000\014\010\141\031\243\033\135\034" +
    "\137\035\140\001\002\000\004\041\244\001\002\000\004" +
    "\025\245\001\002\000\004\010\041\001\002\000\004\026" +
    "\247\001\002\000\004\030\250\001\002\000\024\010\024" +
    "\033\031\034\014\035\033\036\025\040\027\041\036\042" +
    "\022\043\032\001\002\000\026\010\024\031\252\033\031" +
    "\034\014\035\033\036\025\040\027\041\036\042\022\043" +
    "\032\001\002\000\026\010\uffb5\031\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\001" +
    "\002\000\004\027\254\001\002\000\012\005\056\010\060" +
    "\023\116\024\055\001\002\000\004\015\256\001\002\000" +
    "\026\010\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\011\004\007" +
    "\023\015\030\034\032\033\034\022\035\016\036\025\037" +
    "\010\040\017\041\020\042\027\043\014\051\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\105\023" +
    "\107\030\112\032\033\034\110\035\016\036\025\037\010" +
    "\040\017\041\020\042\027\043\014\051\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\104\004\007\023\015\030\034\032\033\034\022\035\016" +
    "\036\025\037\010\040\017\041\020\042\027\043\014\051" +
    "\012\001\001\000\034\004\105\023\107\030\112\032\033" +
    "\034\110\035\016\036\025\037\010\040\017\041\020\042" +
    "\027\043\014\051\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\124\004\007\023\015\030\034\032" +
    "\033\034\022\035\016\036\025\037\010\040\017\041\020" +
    "\042\027\043\014\051\012\001\001\000\034\004\105\023" +
    "\107\030\112\032\033\034\110\035\016\036\025\037\010" +
    "\040\017\041\020\042\027\043\014\051\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\135\022" +
    "\133\001\001\000\006\021\164\023\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\171\001\001\000\002\001\001\000" +
    "\004\027\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\174\004\007\023\015\030" +
    "\034\032\033\034\022\035\016\036\025\037\010\040\017" +
    "\041\020\042\027\043\014\051\012\001\001\000\034\004" +
    "\105\023\107\030\112\032\033\034\110\035\016\036\025" +
    "\037\010\040\017\041\020\042\027\043\014\051\106\001" +
    "\001\000\002\001\001\000\004\023\206\001\001\000\002" +
    "\001\001\000\004\023\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\204\004\007\023\015\030\034" +
    "\032\033\034\022\035\016\036\025\037\010\040\017\041" +
    "\020\042\027\043\014\051\012\001\001\000\034\004\105" +
    "\023\107\030\112\032\033\034\110\035\016\036\025\037" +
    "\010\040\017\041\020\042\027\043\014\051\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\211\004\007\023\015\030\034\032\033\034\022" +
    "\035\016\036\025\037\010\040\017\041\020\042\027\043" +
    "\014\051\012\001\001\000\034\004\105\023\107\030\112" +
    "\032\033\034\110\035\016\036\025\037\010\040\017\041" +
    "\020\042\027\043\014\051\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\215\004\007\023\015\030" +
    "\034\032\033\034\022\035\016\036\025\037\010\040\017" +
    "\041\020\042\027\043\014\051\012\001\001\000\034\004" +
    "\105\023\107\030\112\032\033\034\110\035\016\036\025" +
    "\037\010\040\017\041\020\042\027\043\014\051\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\227" +
    "\004\007\023\015\030\034\032\033\034\022\035\016\036" +
    "\025\037\010\040\017\041\020\042\027\043\014\051\012" +
    "\001\001\000\034\004\105\023\107\030\112\032\033\034" +
    "\110\035\016\036\025\037\010\040\017\041\020\042\027" +
    "\043\014\051\106\001\001\000\002\001\001\000\004\034" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\135\022\241\001\001\000\004" +
    "\021\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\250\004\007\023\015\030\034\032\033\034" +
    "\022\035\016\036\025\037\010\040\017\041\020\042\027" +
    "\043\014\051\012\001\001\000\034\004\105\023\107\030" +
    "\112\032\033\034\110\035\016\036\025\037\010\040\017" +
    "\041\020\042\027\043\014\051\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= clase id llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= C 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= id para id parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O ::= deci 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // O ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O ::= digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIAS ::= VARIAS C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIAS ::= C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIANTES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIANTES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIANTES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIANTES ::= id menig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIANTES ::= id iguall O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIANTES ::= id menor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIANTES ::= id mayor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALORES ::= VALORES pyc VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES ::= VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOS ::= C 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOS ::= id igual id mas O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOS ::= consi para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOS ::= id para id parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOS ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOS ::= id para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOS ::= consi para id parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOS ::= id para cadena parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOS ::= id para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= lete id igual id mas id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= OPERACION OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACION",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACION",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACIONES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACIONES ::= id id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACIONES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACIONES ::= id menor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACIONES ::= id menig id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACIONES ::= id mayor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONES ::= id igual id mas cadena pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONES ::= id igual id mas cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES ::= id igual id por id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES ::= id igual id por id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES ::= id mayig digito and id menig digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= FORMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= IFMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= IFELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= WHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= MIXELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= DOWHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= SWITCHMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= METODOVACIO 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FORMETOD ::= fory para DECLARACIONES OPERACIONES OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IFMETOD ::= ife para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",27, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IFELSEMETOD ::= ife para OPERACIONES parc llavea llavec elsi llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",28, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MIXELSEMETOD ::= ife elsi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",30, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILEMETOD ::= whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",29, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DOWHILEMETOD ::= du llavea DECLARACIONES llavec whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",31, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCHMETOD ::= swi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",32, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // METODOVACIO ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOVACIO",33, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
