
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\027\011\000" +
    "\002\004\004\000\002\022\004\000\002\022\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\032" +
    "\004\000\002\032\003\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\007\000\002\034" +
    "\007\000\002\035\012\000\002\037\010\000\002\036\007" +
    "\000\002\040\012\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\032\005\001\002\000\004\002\125\001" +
    "\002\000\004\010\006\001\002\000\004\030\007\001\002" +
    "\000\016\010\014\036\030\040\021\041\013\042\012\043" +
    "\010\001\002\000\004\025\121\001\002\000\020\010\ufffe" +
    "\031\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\001" +
    "\002\000\004\030\112\001\002\000\004\025\106\001\002" +
    "\000\006\015\056\025\055\001\002\000\020\010\uffeb\031" +
    "\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002" +
    "\000\020\010\uffec\031\uffec\036\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\001\002\000\020\010\uffea\031\uffea\036\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\001\002\000\020\010" +
    "\uffed\031\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\001\002\000\004\025\051\001\002\000\020\010\ufffa\031" +
    "\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\001\002" +
    "\000\020\010\014\031\047\036\030\040\021\041\013\042" +
    "\012\043\010\001\002\000\020\010\uffe9\031\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\001\002\000\020\010" +
    "\ufffc\031\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\001\002\000\020\010\uffe7\031\uffe7\036\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\001\002\000\020\010\uffe8\031\uffe8" +
    "\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000" +
    "\006\025\031\037\032\001\002\000\004\026\037\001\002" +
    "\000\004\025\033\001\002\000\004\026\034\001\002\000" +
    "\004\030\035\001\002\000\004\031\036\001\002\000\020" +
    "\010\uffe3\031\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\001\002\000\004\030\040\001\002\000\004\031\041" +
    "\001\002\000\022\010\uffe5\031\uffe5\036\uffe5\037\042\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002\000\004\030\043" +
    "\001\002\000\004\031\044\001\002\000\020\010\uffe4\031" +
    "\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\001\002" +
    "\000\020\010\uffff\031\uffff\036\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\001\002\000\020\010\ufffb\031\ufffb\036\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000\004\002" +
    "\000\001\002\000\020\010\ufffd\031\ufffd\036\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\001\002\000\004\026\052\001" +
    "\002\000\004\030\053\001\002\000\004\031\054\001\002" +
    "\000\020\010\uffe6\031\uffe6\036\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\001\002\000\004\010\057\001\002\000\020" +
    "\010\ufff8\031\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\001\002\000\004\026\060\001\002\000\004\030\061" +
    "\001\002\000\010\033\062\034\063\035\064\001\002\000" +
    "\004\010\102\001\002\000\004\010\076\001\002\000\004" +
    "\010\067\001\002\000\004\031\066\001\002\000\020\010" +
    "\ufff9\031\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\001\002\000\004\027\070\001\002\000\010\005\073\023" +
    "\071\024\072\001\002\000\004\015\ufff3\001\002\000\004" +
    "\015\ufff4\001\002\000\004\015\ufff5\001\002\000\004\015" +
    "\075\001\002\000\004\031\uffee\001\002\000\004\027\077" +
    "\001\002\000\010\005\073\023\071\024\072\001\002\000" +
    "\004\015\101\001\002\000\004\031\uffef\001\002\000\004" +
    "\027\103\001\002\000\010\005\073\023\071\024\072\001" +
    "\002\000\004\015\105\001\002\000\004\031\ufff0\001\002" +
    "\000\004\026\107\001\002\000\004\030\110\001\002\000" +
    "\004\031\111\001\002\000\020\010\uffe2\031\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\001\002\000\004\031" +
    "\113\001\002\000\004\041\114\001\002\000\004\025\115" +
    "\001\002\000\004\026\116\001\002\000\004\030\117\001" +
    "\002\000\004\031\120\001\002\000\020\010\uffe1\031\uffe1" +
    "\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\001\002\000" +
    "\004\026\122\001\002\000\004\030\123\001\002\000\004" +
    "\031\124\001\002\000\020\010\uffe0\031\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\022\004\010" +
    "\027\024\030\021\031\017\034\015\035\014\036\016\037" +
    "\023\040\026\041\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\044\027\047\030\045\031\017\034\015\035\014" +
    "\036\016\037\023\040\026\041\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= clase id llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= id para id parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // O ::= deci 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // O ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O ::= digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",20, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIAS ::= VARIAS C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIAS ::= C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODOS ::= FORMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODOS ::= IFMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODOS ::= IFELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOS ::= WHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOS ::= MIXELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOS ::= DOWHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOS ::= SWITCHMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORMETOD ::= fory para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFMETOD ::= ife para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFELSEMETOD ::= ife para parc llavea llavec elsi llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",27, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MIXELSEMETOD ::= ife elsi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",29, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHILEMETOD ::= whi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",28, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DOWHILEMETOD ::= du llavea llavec whi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",30, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SWITCHMETOD ::= swi para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",31, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
