
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\030\011\000\002\030\007\000\002\030\011\000\002\030" +
    "\015\000\002\030\010\000\002\030\006\000\002\030\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\021\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\011\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\023\006\000" +
    "\002\023\010\000\002\023\007\000\002\023\010\000\002" +
    "\023\007\000\002\023\011\000\002\023\006\000\002\023" +
    "\005\000\002\023\006\000\002\023\006\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\032\013\000\002\035\011\000\002\036" +
    "\014\000\002\040\012\000\002\037\011\000\002\041\015" +
    "\000\002\042\011\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\030\005\001\002\000\004\002\260\001" +
    "\002\000\004\010\006\001\002\000\004\026\007\001\002" +
    "\000\030\010\025\031\034\032\015\033\035\034\026\035" +
    "\027\036\031\037\040\040\023\041\032\042\020\001\002" +
    "\000\032\010\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\001\002\000\032\010\uffd2\027\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\001\002\000\032\010\ufffa\027\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\001\002\000\032\010\025\027\257\031" +
    "\034\032\015\033\035\034\026\035\027\036\031\037\040" +
    "\040\023\041\032\042\020\001\002\000\032\010\ufffc\027" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002\000\004\010" +
    "\247\001\002\000\032\010\ufff8\027\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\001\002\000\032\010\uffd4\027\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\001\002\000\004\023\226\001\002" +
    "\000\032\010\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\032\010\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\001\002\000\004\026\214\001\002\000\032\010" +
    "\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\001\002\000" +
    "\026\004\053\010\045\013\046\023\200\025\177\044\051" +
    "\046\050\047\044\050\052\051\047\001\002\000\006\023" +
    "\155\035\156\001\002\000\004\026\152\001\002\000\032" +
    "\010\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002" +
    "\000\004\023\136\001\002\000\004\023\130\001\002\000" +
    "\032\010\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001" +
    "\002\000\004\010\124\001\002\000\004\010\120\001\002" +
    "\000\032\010\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\001\002\000\032\010\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\001\002\000\004\023\041\001\002\000\004\010" +
    "\043\001\002\000\004\024\107\001\002\000\024\004\053" +
    "\010\045\013\046\025\054\044\051\046\050\047\044\050" +
    "\052\051\047\001\002\000\012\005\062\010\064\021\060" +
    "\022\061\001\002\000\034\010\uffe0\024\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\001\002\000\004\013\104\001" +
    "\002\000\012\005\062\010\064\021\060\022\061\001\002" +
    "\000\012\005\062\010\064\021\060\022\061\001\002\000" +
    "\012\005\062\010\064\021\060\022\061\001\002\000\012" +
    "\005\062\010\064\021\060\022\061\001\002\000\004\004" +
    "\070\001\002\000\004\010\055\001\002\000\006\004\057" +
    "\007\056\001\002\000\004\010\066\001\002\000\012\005" +
    "\062\010\064\021\060\022\061\001\002\000\042\004\uffec" +
    "\010\uffec\015\uffec\024\uffec\027\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\052\uffec\001\002\000\042\004\uffed\010\uffed\015" +
    "\uffed\024\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\052" +
    "\uffed\001\002\000\042\004\uffee\010\uffee\015\uffee\024\uffee" +
    "\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\052\uffee\001\002" +
    "\000\036\010\uffdd\015\065\024\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\001\002\000\042\004\uffeb\010\uffeb\015" +
    "\uffeb\024\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\052" +
    "\uffeb\001\002\000\034\010\uffde\024\uffde\027\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\001\002\000\036\010\uffdb\015\067" +
    "\024\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\034\010\uffdc\024\uffdc\027\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\001\002\000\034\010\uffe1\024\uffe1\027\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\001\002\000\004\015\072\001" +
    "\002\000\034\010\uffd6\024\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\001\002\000\034\010\uffd8\024\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\001\002\000\004\015\075" +
    "\001\002\000\034\010\uffd7\024\uffd7\027\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\006\015\077\052\100\001" +
    "\002\000\034\010\uffdf\024\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\004\010\101\001\002\000\004" +
    "\047\102\001\002\000\012\005\062\010\064\021\060\022" +
    "\061\001\002\000\034\010\uffda\024\uffda\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\001\002\000\034\010\uffe2\024\uffe2" +
    "\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000\004" +
    "\015\106\001\002\000\034\010\uffd9\024\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\001\002\000\004\026\110\001" +
    "\002\000\030\010\025\031\034\032\015\033\035\034\026" +
    "\035\027\036\031\037\040\040\023\041\032\042\020\001" +
    "\002\000\032\010\025\027\116\031\034\032\015\033\035" +
    "\034\026\035\027\036\031\037\040\040\023\041\032\042" +
    "\020\001\002\000\032\010\ufff7\027\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\001\002\000\032\010\ufffb\027\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\001\002\000\032\010\ufffd\027\ufffd" +
    "\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000\032\010\ufff9" +
    "\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002\000\032" +
    "\010\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\032\010\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\001\002\000\004\025\121\001\002\000\012\005\062\010" +
    "\064\021\060\022\061\001\002\000\034\010\uffe7\015\123" +
    "\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\032" +
    "\010\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002" +
    "\000\004\025\125\001\002\000\012\005\062\010\064\021" +
    "\060\022\061\001\002\000\034\010\uffe9\015\127\027\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000\032\010\uffe6" +
    "\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\004" +
    "\010\043\001\002\000\004\024\132\001\002\000\004\026" +
    "\133\001\002\000\030\010\025\031\034\032\015\033\035" +
    "\034\026\035\027\036\031\037\040\040\023\041\032\042" +
    "\020\001\002\000\032\010\025\027\135\031\034\032\015" +
    "\033\035\034\026\035\027\036\031\037\040\040\023\041" +
    "\032\042\020\001\002\000\032\010\uffc7\027\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\012\010\140\031\034" +
    "\032\015\033\035\001\002\000\004\010\043\001\002\000" +
    "\004\025\141\001\002\000\012\005\062\010\064\021\060" +
    "\022\061\001\002\000\004\015\143\001\002\000\032\010" +
    "\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000" +
    "\004\010\043\001\002\000\004\024\146\001\002\000\004" +
    "\026\147\001\002\000\030\010\025\031\034\032\015\033" +
    "\035\034\026\035\027\036\031\037\040\040\023\041\032" +
    "\042\020\001\002\000\032\010\025\027\151\031\034\032" +
    "\015\033\035\034\026\035\027\036\031\037\040\040\023" +
    "\041\032\042\020\001\002\000\032\010\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\001\002\000\030\010\025\031" +
    "\034\032\015\033\035\034\026\035\027\036\031\037\040" +
    "\040\023\041\032\042\020\001\002\000\032\010\025\027" +
    "\154\031\034\032\015\033\035\034\026\035\027\036\031" +
    "\037\040\040\023\041\032\042\020\001\002\000\032\010" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\001\002\000" +
    "\004\010\043\001\002\000\004\023\157\001\002\000\004" +
    "\010\043\001\002\000\004\024\161\001\002\000\004\026" +
    "\162\001\002\000\030\010\025\031\034\032\015\033\035" +
    "\034\026\035\027\036\031\037\040\040\023\041\032\042" +
    "\020\001\002\000\032\010\025\027\164\031\034\032\015" +
    "\033\035\034\026\035\027\036\031\037\040\040\023\041" +
    "\032\042\020\001\002\000\032\010\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\001\002\000\004\024\166\001\002" +
    "\000\004\026\167\001\002\000\032\010\025\027\171\031" +
    "\034\032\015\033\035\034\026\035\027\036\031\037\040" +
    "\040\023\041\032\042\020\001\002\000\032\010\025\027" +
    "\176\031\034\032\015\033\035\034\026\035\027\036\031" +
    "\037\040\040\023\041\032\042\020\001\002\000\004\035" +
    "\172\001\002\000\004\026\173\001\002\000\030\010\025" +
    "\031\034\032\015\033\035\034\026\035\027\036\031\037" +
    "\040\040\023\041\032\042\020\001\002\000\032\010\025" +
    "\027\175\031\034\032\015\033\035\034\026\035\027\036" +
    "\031\037\040\040\023\041\032\042\020\001\002\000\032" +
    "\010\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\001\002" +
    "\000\032\010\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\001\002\000\012\005\062\010\213\021\060\022\061\001" +
    "\002\000\006\010\202\024\201\001\002\000\036\010\uffef" +
    "\015\207\026\210\027\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\001\002\000\004\024\203\001\002\000\004\026\204\001" +
    "\002\000\030\010\025\031\034\032\015\033\035\034\026" +
    "\035\027\036\031\037\040\040\023\041\032\042\020\001" +
    "\002\000\032\010\025\027\206\031\034\032\015\033\035" +
    "\034\026\035\027\036\031\037\040\040\023\041\032\042" +
    "\020\001\002\000\032\010\ufff5\027\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\001\002\000\032\010\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\001\002\000\030\010\025\031\034" +
    "\032\015\033\035\034\026\035\027\036\031\037\040\040" +
    "\023\041\032\042\020\001\002\000\032\010\025\027\212" +
    "\031\034\032\015\033\035\034\026\035\027\036\031\037" +
    "\040\040\023\041\032\042\020\001\002\000\032\010\ufff1" +
    "\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000\010" +
    "\004\057\007\056\015\uffeb\001\002\000\012\010\140\031" +
    "\034\032\015\033\035\001\002\000\004\027\216\001\002" +
    "\000\004\037\217\001\002\000\004\023\220\001\002\000" +
    "\004\010\043\001\002\000\004\024\222\001\002\000\004" +
    "\026\223\001\002\000\030\010\025\031\034\032\015\033" +
    "\035\034\026\035\027\036\031\037\040\040\023\041\032" +
    "\042\020\001\002\000\032\010\025\027\225\031\034\032" +
    "\015\033\035\034\026\035\027\036\031\037\040\040\023" +
    "\041\032\042\020\001\002\000\032\010\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\001\002\000\012\005\062\010" +
    "\230\021\060\022\061\001\002\000\004\004\237\001\002" +
    "\000\006\004\231\024\232\001\002\000\012\005\062\010" +
    "\064\021\060\022\061\001\002\000\004\015\233\001\002" +
    "\000\032\010\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\001\002\000\004\024\235\001\002\000\004\015\236\001" +
    "\002\000\032\010\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\001\002\000\004\010\240\001\002\000\004\004\241" +
    "\001\002\000\012\005\062\010\064\021\060\022\061\001" +
    "\002\000\004\004\243\001\002\000\012\005\062\010\064" +
    "\021\060\022\061\001\002\000\004\024\245\001\002\000" +
    "\004\015\246\001\002\000\032\010\ufff2\027\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\001\002\000\004\025\250\001\002" +
    "\000\012\005\062\010\252\021\060\022\061\001\002\000" +
    "\034\010\uffe8\015\256\027\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\001\002\000\036\004\253\010\uffeb\015\uffeb\027\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\004\010\254" +
    "\001\002\000\004\015\255\001\002\000\032\010\uffe3\027" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002\000\032\010" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\012\021\011" +
    "\023\015\030\036\031\007\032\035\035\016\036\027\037" +
    "\010\040\020\041\021\042\032\051\013\053\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\021\112\023\114\030\116\031\111\032\035\035\016" +
    "\036\027\037\010\040\020\041\021\042\032\051\113\053" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\075\001\001\000\004\027\073\001\001\000\004\027" +
    "\072\001\001\000\004\027\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\110\021\011\023\015\030\036\031\007\032\035" +
    "\035\016\036\027\037\010\040\020\041\021\042\032\051" +
    "\013\053\023\001\001\000\034\021\112\023\114\030\116" +
    "\031\111\032\035\035\016\036\027\037\010\040\020\041" +
    "\021\042\032\051\113\053\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\133\021\011\023\015" +
    "\030\036\031\007\032\035\035\016\036\027\037\010\040" +
    "\020\041\021\042\032\051\013\053\023\001\001\000\034" +
    "\021\112\023\114\030\116\031\111\032\035\035\016\036" +
    "\027\037\010\040\020\041\021\042\032\051\113\053\023" +
    "\001\001\000\002\001\001\000\004\021\136\001\001\000" +
    "\004\023\143\001\001\000\002\001\001\000\004\027\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\147\021\011\023\015\030\036\031\007\032\035\035" +
    "\016\036\027\037\010\040\020\041\021\042\032\051\013" +
    "\053\023\001\001\000\034\021\112\023\114\030\116\031" +
    "\111\032\035\035\016\036\027\037\010\040\020\041\021" +
    "\042\032\051\113\053\023\001\001\000\002\001\001\000" +
    "\036\003\152\021\011\023\015\030\036\031\007\032\035" +
    "\035\016\036\027\037\010\040\020\041\021\042\032\051" +
    "\013\053\023\001\001\000\034\021\112\023\114\030\116" +
    "\031\111\032\035\035\016\036\027\037\010\040\020\041" +
    "\021\042\032\051\113\053\023\001\001\000\002\001\001" +
    "\000\004\023\164\001\001\000\002\001\001\000\004\023" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\162\021\011\023\015\030\036\031\007\032\035\035" +
    "\016\036\027\037\010\040\020\041\021\042\032\051\013" +
    "\053\023\001\001\000\034\021\112\023\114\030\116\031" +
    "\111\032\035\035\016\036\027\037\010\040\020\041\021" +
    "\042\032\051\113\053\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\167\021\011" +
    "\023\015\030\036\031\007\032\035\035\016\036\027\037" +
    "\010\040\020\041\021\042\032\051\013\053\023\001\001" +
    "\000\034\021\112\023\114\030\116\031\111\032\035\035" +
    "\016\036\027\037\010\040\020\041\021\042\032\051\113" +
    "\053\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\173\021\011\023\015\030\036\031\007\032\035" +
    "\035\016\036\027\037\010\040\020\041\021\042\032\051" +
    "\013\053\023\001\001\000\034\021\112\023\114\030\116" +
    "\031\111\032\035\035\016\036\027\037\010\040\020\041" +
    "\021\042\032\051\113\053\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\204\021\011\023\015\030\036\031\007\032" +
    "\035\035\016\036\027\037\010\040\020\041\021\042\032" +
    "\051\013\053\023\001\001\000\034\021\112\023\114\030" +
    "\116\031\111\032\035\035\016\036\027\037\010\040\020" +
    "\041\021\042\032\051\113\053\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\210\021\011\023\015" +
    "\030\036\031\007\032\035\035\016\036\027\037\010\040" +
    "\020\041\021\042\032\051\013\053\023\001\001\000\034" +
    "\021\112\023\114\030\116\031\111\032\035\035\016\036" +
    "\027\037\010\040\020\041\021\042\032\051\113\053\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\223\021\011\023\015\030\036" +
    "\031\007\032\035\035\016\036\027\037\010\040\020\041" +
    "\021\042\032\051\013\053\023\001\001\000\034\021\112" +
    "\023\114\030\116\031\111\032\035\035\016\036\027\037" +
    "\010\040\020\041\021\042\032\051\113\053\023\001\001" +
    "\000\002\001\001\000\004\027\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\241\001\001\000\002\001\001\000\004\027" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= clase id llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= METODOS 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= id para id parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= consi para id parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= consi para id mas O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= consi para O mas id mas O mas O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= id para parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= id para parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= id para parc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // O ::= deci 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // O ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // O ::= digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // O ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= vare id igual O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= lete id igual O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= conste id igual O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= lete id igual id mas id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIONES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACIONES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACIONES ::= id id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACIONES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACIONES ::= id igual id mas O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACIONES ::= id igual id mas O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES ::= id igual id por id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES ::= id igual id por id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES ::= id mayig O and id menig O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES ::= id menig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACIONES ::= id iguall O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACIONES ::= id menor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACIONES ::= id mayor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= FORMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= IFMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= IFELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= WHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= MIXELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= DOWHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= SWITCHMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= ELSEMETODE 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FORMETOD ::= fory para DECLARACION OPERACIONES OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IFMETOD ::= ife para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",27, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IFELSEMETOD ::= ife para OPERACIONES parc llavea llavec elsi llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",28, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MIXELSEMETOD ::= ife elsi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",30, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WHILEMETOD ::= whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",29, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DOWHILEMETOD ::= du llavea DECLARACION llavec whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",31, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCHMETOD ::= swi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",32, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELSEMETODE ::= elsi llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEMETODE",41, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
