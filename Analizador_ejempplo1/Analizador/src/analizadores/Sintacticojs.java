
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\030\011\000\002\004\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\033\004" +
    "\000\002\033\003\000\002\034\007\000\002\034\007\000" +
    "\002\034\007\000\002\034\006\000\002\045\006\000\002" +
    "\045\005\000\002\045\005\000\002\045\006\000\002\045" +
    "\005\000\002\045\006\000\002\045\006\000\002\046\005" +
    "\000\002\046\003\000\002\047\003\000\002\047\010\000" +
    "\002\047\007\000\002\031\010\000\002\031\010\000\002" +
    "\031\007\000\002\031\007\000\002\031\007\000\002\031" +
    "\007\000\002\022\004\000\002\022\003\000\002\021\006" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\021\011\000\002\024\004\000\002\024\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\010\000\002\023\007\000\002\023\010\000" +
    "\002\023\007\000\002\023\011\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\032\013\000\002\035\011\000" +
    "\002\036\014\000\002\040\012\000\002\037\011\000\002" +
    "\041\015\000\002\042\011\000\002\043\010\000\002\053" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\030\005\001\002\000\004\002\264\001" +
    "\002\000\004\010\006\001\002\000\004\026\007\001\002" +
    "\000\026\010\025\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\001\002\000\030" +
    "\010\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\030" +
    "\010\025\027\263\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\004" +
    "\010\257\001\002\000\030\010\uffbb\027\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\001\002\000\030\010\ufff6\027\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\030\010\uffc1\027\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\001\002\000\030\010\uffbe\027\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\001\002\000\030\010\uffbd\027\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\001\002\000\030\010\uffba\027\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\001\002\000\004\026\245\001\002\000\030\010" +
    "\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\026\004" +
    "\045\010\053\013\047\015\225\023\227\025\226\046\050" +
    "\047\046\050\052\051\051\001\002\000\006\023\203\035" +
    "\204\001\002\000\004\026\200\001\002\000\030\010\uffc0" +
    "\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000\004\023\134" +
    "\001\002\000\030\010\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\001\002\000\004\010\130\001\002\000\004\023\122\001" +
    "\002\000\004\010\116\001\002\000\030\010\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\001\002\000\004\023\041\001\002" +
    "\000\030\010\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\001\002" +
    "\000\004\010\043\001\002\000\004\024\105\001\002\000" +
    "\022\004\045\010\053\013\047\025\044\046\050\047\046" +
    "\050\052\051\051\001\002\000\004\010\076\001\002\000" +
    "\004\004\075\001\002\000\004\010\073\001\002\000\004" +
    "\013\072\001\002\000\004\010\070\001\002\000\012\005" +
    "\060\010\062\021\056\022\057\001\002\000\004\010\054" +
    "\001\002\000\032\010\uffcc\024\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\001\002\000\004\015\055\001\002\000\032\010" +
    "\uffc8\024\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000" +
    "\036\010\ufff1\015\ufff1\024\ufff1\027\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\052\ufff1\001\002\000\036\010\ufff2\015\ufff2\024\ufff2" +
    "\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\052\ufff2\001\002\000\036" +
    "\010\ufff3\015\ufff3\024\ufff3\027\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\052\ufff3\001\002\000\006\015\063\052\064\001\002\000" +
    "\036\010\ufff0\015\ufff0\024\ufff0\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\052\ufff0\001\002\000\032\010\uffcb\024\uffcb\027\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\001\002\000\004\010\065\001\002" +
    "\000\004\047\066\001\002\000\012\005\060\010\062\021" +
    "\056\022\057\001\002\000\032\010\uffc3\024\uffc3\027\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\001\002\000\004\015\071\001\002" +
    "\000\032\010\uffca\024\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\001\002\000\032\010\uffce\024\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\001\002\000\004\015\074\001\002\000\032\010" +
    "\uffc9\024\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002\000" +
    "\032\010\uffcd\024\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\001" +
    "\002\000\006\004\100\007\077\001\002\000\004\010\103" +
    "\001\002\000\004\022\101\001\002\000\034\010\uffc6\015" +
    "\102\024\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000" +
    "\032\010\uffc7\024\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\001" +
    "\002\000\034\010\uffc4\015\104\024\uffc4\027\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\001\002\000\032\010\uffc5\024\uffc5\027\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\001\002\000\004\026\106\001\002" +
    "\000\026\010\025\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\025\027\114\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\001\002\000\030" +
    "\010\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000\030" +
    "\010\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\001\002\000\030" +
    "\010\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\030" +
    "\010\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\001\002\000\030" +
    "\010\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\001\002\000\004" +
    "\025\117\001\002\000\012\005\060\010\062\021\056\022" +
    "\057\001\002\000\004\015\121\001\002\000\030\010\uffeb" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002\000\004\010\043" +
    "\001\002\000\004\024\124\001\002\000\004\026\125\001" +
    "\002\000\026\010\025\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\030\010\025\027\127\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\030\010\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\001\002\000" +
    "\004\025\131\001\002\000\012\005\060\010\062\021\056" +
    "\022\057\001\002\000\004\015\133\001\002\000\030\010" +
    "\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000\012\010" +
    "\142\031\136\032\140\033\141\001\002\000\012\010\170" +
    "\031\136\032\140\033\141\001\002\000\004\010\162\001" +
    "\002\000\014\010\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\001\002\000\004\010\152\001\002\000\004\010\146\001" +
    "\002\000\004\025\143\001\002\000\012\005\060\010\062" +
    "\021\056\022\057\001\002\000\004\015\145\001\002\000" +
    "\014\010\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\001\002" +
    "\000\004\025\147\001\002\000\012\005\060\010\062\021" +
    "\056\022\057\001\002\000\004\015\151\001\002\000\014" +
    "\010\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\001\002\000" +
    "\004\025\153\001\002\000\012\005\060\010\155\021\056" +
    "\022\057\001\002\000\004\015\161\001\002\000\006\004" +
    "\156\015\ufff0\001\002\000\004\010\157\001\002\000\004" +
    "\015\160\001\002\000\014\010\uffd1\027\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\001\002\000\014\010\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\001\002\000\004\025\163\001\002\000" +
    "\012\005\060\010\062\021\056\022\057\001\002\000\004" +
    "\015\165\001\002\000\014\010\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\001\002\000\014\010\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\001\002\000\004\010\043\001\002\000" +
    "\022\004\045\010\053\013\047\025\171\046\050\047\046" +
    "\050\052\051\051\001\002\000\012\005\060\010\172\021" +
    "\056\022\057\001\002\000\010\004\100\007\077\015\ufff0" +
    "\001\002\000\004\024\174\001\002\000\004\026\175\001" +
    "\002\000\026\010\025\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\030\010\025\027\177\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\030\010\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002\000" +
    "\004\010\043\001\002\000\004\027\202\001\002\000\030" +
    "\010\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000\004" +
    "\010\043\001\002\000\004\023\205\001\002\000\004\010" +
    "\043\001\002\000\004\024\207\001\002\000\004\026\210" +
    "\001\002\000\026\010\025\031\033\032\014\033\035\034" +
    "\026\035\027\036\031\037\037\040\023\041\034\001\002" +
    "\000\030\010\025\027\212\031\033\032\014\033\035\034" +
    "\026\035\027\036\031\037\037\040\023\041\034\001\002" +
    "\000\030\010\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\001\002" +
    "\000\004\024\214\001\002\000\004\026\215\001\002\000" +
    "\030\010\025\027\217\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\030\010\025\027\224\031\033\032\014\033\035\034\026" +
    "\035\027\036\031\037\037\040\023\041\034\001\002\000" +
    "\004\035\220\001\002\000\004\026\221\001\002\000\026" +
    "\010\025\031\033\032\014\033\035\034\026\035\027\036" +
    "\031\037\037\040\023\041\034\001\002\000\030\010\025" +
    "\027\223\031\033\032\014\033\035\034\026\035\027\036" +
    "\031\037\037\040\023\041\034\001\002\000\030\010\uffb7" +
    "\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\001\002\000\030\010\uffb8" +
    "\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\030\010\ufff4" +
    "\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002\000\012\005\060" +
    "\010\172\021\056\022\057\001\002\000\006\010\231\024" +
    "\230\001\002\000\004\026\236\001\002\000\004\024\232" +
    "\001\002\000\004\026\233\001\002\000\026\010\025\031" +
    "\033\032\014\033\035\034\026\035\027\036\031\037\037" +
    "\040\023\041\034\001\002\000\030\010\025\027\235\031" +
    "\033\032\014\033\035\034\026\035\027\036\031\037\037" +
    "\040\023\041\034\001\002\000\030\010\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\012\010\240\031\033\032" +
    "\014\033\035\001\002\000\004\027\244\001\002\000\004" +
    "\025\241\001\002\000\012\005\060\010\062\021\056\022" +
    "\057\001\002\000\004\015\243\001\002\000\030\010\uffea" +
    "\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\001\002\000\030\010\uffb2" +
    "\027\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\001\002\000\012\010\142" +
    "\031\136\032\140\033\141\001\002\000\014\010\142\027" +
    "\247\031\136\032\140\033\141\001\002\000\004\037\250" +
    "\001\002\000\004\023\251\001\002\000\004\010\043\001" +
    "\002\000\004\024\253\001\002\000\004\026\254\001\002" +
    "\000\026\010\025\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\025\027\256\031\033\032\014\033\035\034\026\035" +
    "\027\036\031\037\037\040\023\041\034\001\002\000\030" +
    "\010\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002\000\004" +
    "\025\260\001\002\000\012\005\060\010\062\021\056\022" +
    "\057\001\002\000\004\015\262\001\002\000\030\010\uffec" +
    "\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\011\004\007" +
    "\023\015\030\037\032\035\034\023\035\016\036\027\037" +
    "\010\040\017\041\020\042\031\043\014\051\012\053\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\107\023\111\030\114\032\035\034\112\035\016\036\027" +
    "\037\010\040\017\041\020\042\031\043\014\051\110\053" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\106\004\007\023\015\030\037\032\035\034\023\035" +
    "\016\036\027\037\010\040\017\041\020\042\031\043\014" +
    "\051\012\053\021\001\001\000\036\004\107\023\111\030" +
    "\114\032\035\034\112\035\016\036\027\037\010\040\017" +
    "\041\020\042\031\043\014\051\110\053\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\125\004\007\023\015\030\037" +
    "\032\035\034\023\035\016\036\027\037\010\040\017\041" +
    "\020\042\031\043\014\051\012\053\021\001\001\000\036" +
    "\004\107\023\111\030\114\032\035\034\112\035\016\036" +
    "\027\037\010\040\017\041\020\042\031\043\014\051\110" +
    "\053\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\136\022\134\001\001\000\006\021\165\023" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\172\001\001" +
    "\000\002\001\001\000\004\027\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\175" +
    "\004\007\023\015\030\037\032\035\034\023\035\016\036" +
    "\027\037\010\040\017\041\020\042\031\043\014\051\012" +
    "\053\021\001\001\000\036\004\107\023\111\030\114\032" +
    "\035\034\112\035\016\036\027\037\010\040\017\041\020" +
    "\042\031\043\014\051\110\053\021\001\001\000\002\001" +
    "\001\000\004\023\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\212\001\001\000\002\001\001\000" +
    "\004\023\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\210\004\007\023\015\030\037\032\035\034" +
    "\023\035\016\036\027\037\010\040\017\041\020\042\031" +
    "\043\014\051\012\053\021\001\001\000\036\004\107\023" +
    "\111\030\114\032\035\034\112\035\016\036\027\037\010" +
    "\040\017\041\020\042\031\043\014\051\110\053\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\215\004\007\023\015\030\037\032\035\034" +
    "\023\035\016\036\027\037\010\040\017\041\020\042\031" +
    "\043\014\051\012\053\021\001\001\000\036\004\107\023" +
    "\111\030\114\032\035\034\112\035\016\036\027\037\010" +
    "\040\017\041\020\042\031\043\014\051\110\053\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\221" +
    "\004\007\023\015\030\037\032\035\034\023\035\016\036" +
    "\027\037\010\040\017\041\020\042\031\043\014\051\012" +
    "\053\021\001\001\000\036\004\107\023\111\030\114\032" +
    "\035\034\112\035\016\036\027\037\010\040\017\041\020" +
    "\042\031\043\014\051\110\053\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\233\004\007\023\015" +
    "\030\037\032\035\034\023\035\016\036\027\037\010\040" +
    "\017\041\020\042\031\043\014\051\012\053\021\001\001" +
    "\000\036\004\107\023\111\030\114\032\035\034\112\035" +
    "\016\036\027\037\010\040\017\041\020\042\031\043\014" +
    "\051\110\053\021\001\001\000\002\001\001\000\004\034" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\136\022\245\001\001\000\004" +
    "\021\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\254\004\007\023\015\030\037\032\035\034" +
    "\023\035\016\036\027\037\010\040\017\041\020\042\031" +
    "\043\014\051\012\053\021\001\001\000\036\004\107\023" +
    "\111\030\114\032\035\034\112\035\016\036\027\037\010" +
    "\040\017\041\020\042\031\043\014\051\110\053\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= clase id llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= C 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= OPERACIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= id para id parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O ::= deci 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // O ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O ::= digito 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O ::= id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",21, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIAS ::= VARIAS C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIAS ::= C 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIAS",25, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("C",26, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIANTES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIANTES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIANTES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIANTES ::= id menig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIANTES ::= id iguall O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIANTES ::= id menor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIANTES ::= id mayor O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VARIANTES",35, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALORES ::= VALORES pyc VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORES ::= VARIANTES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("VALORES",36, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOS ::= C 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOS ::= id igual id mas O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOS ::= consi para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",37, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOS ::= id para id parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOS ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOS ::= id para parc llavea llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOS ::= consi para id parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOS ::= id para cadena parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOS ::= id para O parc pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOS",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= vare id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= lete id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= conste id igual O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= lete id igual id mas id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= OPERACION OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACION",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACION",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES ::= id menos menos 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACIONES ::= id mas mas 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACIONES ::= id id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACIONES ::= id mayig O pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACIONES ::= id menor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACIONES ::= id menig id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACIONES ::= id mayor id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONES ::= id igual id mas cadena pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONES ::= id igual id mas cadena 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES ::= id igual id por id pyc 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES ::= id igual id por id 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES ::= id mayig O and id menig O 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= FORMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= IFMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= IFELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= WHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= MIXELSEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= DOWHILEMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= SWITCHMETOD 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= METODOVACIO 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= ELSEMETODE 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FORMETOD ::= fory para DECLARACIONES OPERACIONES OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IFMETOD ::= ife para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",27, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IFELSEMETOD ::= ife para OPERACIONES parc llavea llavec elsi llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",28, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MIXELSEMETOD ::= ife elsi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",30, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILEMETOD ::= whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",29, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DOWHILEMETOD ::= du llavea DECLARACIONES llavec whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",31, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCHMETOD ::= swi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",32, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // METODOVACIO ::= id para parc llavea C llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("METODOVACIO",33, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSEMETODE ::= elsi llavea OPERACIONES llavec 
            {
              Object RESULT =null;
		
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEMETODE",41, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
