
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import ventana_compi.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintacticojs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolosjs.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintacticojs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintacticojs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintacticojs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\032" +
    "\007\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\014\011\000\002\014\007\000\002\014" +
    "\011\000\002\014\015\000\002\014\010\000\002\014\006" +
    "\000\002\014\005\000\002\014\017\000\002\014\017\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\011\000\002\005\010\000" +
    "\002\007\005\000\002\007\005\000\002\007\006\000\002" +
    "\007\004\000\002\007\006\000\002\007\010\000\002\007" +
    "\007\000\002\007\011\000\002\007\006\000\002\007\005" +
    "\000\002\007\005\000\002\007\006\000\002\007\006\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\016\013\000\002\017\011" +
    "\000\002\020\014\000\002\022\012\000\002\021\011\000" +
    "\002\023\014\000\002\024\011\000\002\031\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\030\006\001\002\000\004\002\306\001" +
    "\002\000\004\002\000\001\002\000\004\010\007\001\002" +
    "\000\004\026\010\001\002\000\030\010\026\031\035\032" +
    "\016\033\036\034\027\035\030\036\032\037\041\040\025" +
    "\041\034\042\021\001\002\000\032\010\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\001\002\000\032\010\uffce\027" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\001\002\000\032\010" +
    "\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002\000" +
    "\032\010\026\027\305\031\035\032\016\033\036\034\027" +
    "\035\030\036\032\037\041\040\025\041\034\042\021\001" +
    "\002\000\032\010\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\001\002\000\004\010\275\001\002\000\032\010\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\001\002\000\032" +
    "\010\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\001\002" +
    "\000\004\023\254\001\002\000\032\010\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\001\002\000\032\010\uffcc\027" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\001\002\000\032\010" +
    "\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001\002\000" +
    "\004\026\243\001\002\000\026\004\054\010\046\013\047" +
    "\023\203\025\202\044\052\046\050\047\045\050\053\051" +
    "\051\001\002\000\006\023\160\035\161\001\002\000\004" +
    "\026\155\001\002\000\032\010\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\001\002\000\004\023\135\001\002\000" +
    "\032\010\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\001" +
    "\002\000\004\023\127\001\002\000\004\010\123\001\002" +
    "\000\004\010\117\001\002\000\032\010\ufffd\027\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\001\002\000\032\010\uffd1\027" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002\000\004\023" +
    "\042\001\002\000\004\010\044\001\002\000\004\024\106" +
    "\001\002\000\024\004\054\010\046\013\047\025\055\044" +
    "\052\046\050\047\045\050\053\051\051\001\002\000\012" +
    "\005\062\010\064\021\060\022\061\001\002\000\034\010" +
    "\uffdb\024\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001" +
    "\002\000\004\013\103\001\002\000\012\005\062\010\064" +
    "\021\060\022\061\001\002\000\012\005\062\010\064\021" +
    "\060\022\061\001\002\000\012\005\062\010\064\021\060" +
    "\022\061\001\002\000\012\005\062\010\064\021\060\022" +
    "\061\001\002\000\004\004\066\001\002\000\004\010\056" +
    "\001\002\000\004\004\057\001\002\000\012\005\062\010" +
    "\064\021\060\022\061\001\002\000\044\004\uffe9\006\uffe9" +
    "\010\uffe9\015\uffe9\024\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\052\uffe9\001\002\000\044\004\uffea\006\uffea\010" +
    "\uffea\015\uffea\024\uffea\027\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\052\uffea\001\002\000\044\004\uffeb\006\uffeb\010\uffeb" +
    "\015\uffeb\024\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\052\uffeb\001\002\000\036\010\uffd8\015\065\024\uffd8\027" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001\002\000\044\004" +
    "\uffe8\006\uffe8\010\uffe8\015\uffe8\024\uffe8\027\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\052\uffe8\001\002\000\034\010\uffd9" +
    "\024\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001\002" +
    "\000\036\010\uffdd\015\067\024\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\001\002\000\034\010\uffdc\024\uffdc\027" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000\004\015" +
    "\071\001\002\000\034\010\uffd2\024\uffd2\027\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\001\002\000\034\010\uffd4\024\uffd4" +
    "\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000\006" +
    "\015\074\052\075\001\002\000\034\010\uffda\024\uffda\027" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\001\002\000\004\010" +
    "\076\001\002\000\004\047\077\001\002\000\012\005\062" +
    "\010\064\021\060\022\061\001\002\000\034\010\uffd7\024" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\004\015\102\001\002\000\034\010\uffd3\024\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002\000\034\010\uffde" +
    "\024\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001\002" +
    "\000\036\010\uffd5\015\105\024\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\001\002\000\034\010\uffd6\024\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002\000\004\026" +
    "\107\001\002\000\030\010\026\031\035\032\016\033\036" +
    "\034\027\035\030\036\032\037\041\040\025\041\034\042" +
    "\021\001\002\000\032\010\026\027\115\031\035\032\016" +
    "\033\036\034\027\035\030\036\032\037\041\040\025\041" +
    "\034\042\021\001\002\000\032\010\ufff6\027\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\001\002\000\032\010\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\001\002\000\032\010\ufffc" +
    "\027\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002\000\032" +
    "\010\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\032\010\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\001\002\000\032\010\ufffe\027\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\001\002\000\004\025\120\001\002\000\012\005" +
    "\062\010\064\021\060\022\061\001\002\000\034\010\uffe4" +
    "\015\122\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002" +
    "\000\032\010\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\001\002\000\004\025\124\001\002\000\012\005\062\010" +
    "\064\021\060\022\061\001\002\000\034\010\uffe6\015\126" +
    "\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\032" +
    "\010\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002" +
    "\000\004\010\044\001\002\000\004\024\131\001\002\000" +
    "\004\026\132\001\002\000\030\010\026\031\035\032\016" +
    "\033\036\034\027\035\030\036\032\037\041\040\025\041" +
    "\034\042\021\001\002\000\032\010\026\027\134\031\035" +
    "\032\016\033\036\034\027\035\030\036\032\037\041\040" +
    "\025\041\034\042\021\001\002\000\032\010\uffc3\027\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\001\002\000\012\010\137" +
    "\031\035\032\016\033\036\001\002\000\004\010\044\001" +
    "\002\000\004\025\140\001\002\000\012\005\062\010\142" +
    "\021\060\022\061\001\002\000\004\015\146\001\002\000" +
    "\006\007\143\015\uffe8\001\002\000\004\010\144\001\002" +
    "\000\004\015\145\001\002\000\032\010\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\001\002\000\032\010\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\004\010" +
    "\044\001\002\000\004\024\151\001\002\000\004\026\152" +
    "\001\002\000\030\010\026\031\035\032\016\033\036\034" +
    "\027\035\030\036\032\037\041\040\025\041\034\042\021" +
    "\001\002\000\032\010\026\027\154\031\035\032\016\033" +
    "\036\034\027\035\030\036\032\037\041\040\025\041\034" +
    "\042\021\001\002\000\032\010\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\001\002\000\030\010\026\031\035\032" +
    "\016\033\036\034\027\035\030\036\032\037\041\040\025" +
    "\041\034\042\021\001\002\000\032\010\026\027\157\031" +
    "\035\032\016\033\036\034\027\035\030\036\032\037\041" +
    "\040\025\041\034\042\021\001\002\000\032\010\uffc2\027" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\001\002\000\004\010" +
    "\044\001\002\000\004\023\162\001\002\000\004\010\044" +
    "\001\002\000\004\024\164\001\002\000\004\026\165\001" +
    "\002\000\030\010\026\031\035\032\016\033\036\034\027" +
    "\035\030\036\032\037\041\040\025\041\034\042\021\001" +
    "\002\000\032\010\026\027\167\031\035\032\016\033\036" +
    "\034\027\035\030\036\032\037\041\040\025\041\034\042" +
    "\021\001\002\000\032\010\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\001\002\000\004\024\171\001\002\000\004" +
    "\026\172\001\002\000\032\010\026\027\174\031\035\032" +
    "\016\033\036\034\027\035\030\036\032\037\041\040\025" +
    "\041\034\042\021\001\002\000\032\010\026\027\201\031" +
    "\035\032\016\033\036\034\027\035\030\036\032\037\041" +
    "\040\025\041\034\042\021\001\002\000\004\035\175\001" +
    "\002\000\004\026\176\001\002\000\030\010\026\031\035" +
    "\032\016\033\036\034\027\035\030\036\032\037\041\040" +
    "\025\041\034\042\021\001\002\000\032\010\026\027\200" +
    "\031\035\032\016\033\036\034\027\035\030\036\032\037" +
    "\041\040\025\041\034\042\021\001\002\000\032\010\uffc7" +
    "\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\001\002\000\032" +
    "\010\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\001\002" +
    "\000\012\005\062\010\242\021\060\022\061\001\002\000" +
    "\006\010\205\024\204\001\002\000\036\010\uffee\015\236" +
    "\026\237\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002" +
    "\000\010\006\206\013\207\024\210\001\002\000\004\010" +
    "\225\001\002\000\012\005\062\010\064\021\060\022\061" +
    "\001\002\000\004\026\211\001\002\000\030\010\026\031" +
    "\035\032\016\033\036\034\027\035\030\036\032\037\041" +
    "\040\025\041\034\042\021\001\002\000\032\010\026\027" +
    "\213\031\035\032\016\033\036\034\027\035\030\036\032" +
    "\037\041\040\025\041\034\042\021\001\002\000\032\010" +
    "\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\001\002\000" +
    "\004\006\215\001\002\000\004\010\216\001\002\000\004" +
    "\006\217\001\002\000\004\010\220\001\002\000\004\006" +
    "\221\001\002\000\004\010\222\001\002\000\004\024\223" +
    "\001\002\000\004\015\224\001\002\000\032\010\uffec\027" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000\004\006" +
    "\226\001\002\000\004\010\227\001\002\000\004\006\230" +
    "\001\002\000\004\010\231\001\002\000\004\024\232\001" +
    "\002\000\004\026\233\001\002\000\030\010\026\031\035" +
    "\032\016\033\036\034\027\035\030\036\032\037\041\040" +
    "\025\041\034\042\021\001\002\000\032\010\026\027\235" +
    "\031\035\032\016\033\036\034\027\035\030\036\032\037" +
    "\041\040\025\041\034\042\021\001\002\000\032\010\uffed" +
    "\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\032" +
    "\010\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001\002" +
    "\000\030\010\026\031\035\032\016\033\036\034\027\035" +
    "\030\036\032\037\041\040\025\041\034\042\021\001\002" +
    "\000\032\010\026\027\241\031\035\032\016\033\036\034" +
    "\027\035\030\036\032\037\041\040\025\041\034\042\021" +
    "\001\002\000\032\010\ufff0\027\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\001\002\000\010\004\057\007\143\015\uffe8\001" +
    "\002\000\012\010\137\031\035\032\016\033\036\001\002" +
    "\000\004\010\044\001\002\000\004\027\246\001\002\000" +
    "\004\037\247\001\002\000\004\023\250\001\002\000\004" +
    "\010\044\001\002\000\004\024\252\001\002\000\004\015" +
    "\253\001\002\000\032\010\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\001\002\000\012\005\062\010\256\021\060" +
    "\022\061\001\002\000\004\004\265\001\002\000\006\004" +
    "\257\024\260\001\002\000\012\005\062\010\064\021\060" +
    "\022\061\001\002\000\004\015\261\001\002\000\032\010" +
    "\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002\000" +
    "\004\024\263\001\002\000\004\015\264\001\002\000\032" +
    "\010\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\001\002" +
    "\000\012\005\062\010\064\021\060\022\061\001\002\000" +
    "\004\004\267\001\002\000\012\005\062\010\064\021\060" +
    "\022\061\001\002\000\004\004\271\001\002\000\012\005" +
    "\062\010\064\021\060\022\061\001\002\000\004\024\273" +
    "\001\002\000\004\015\274\001\002\000\032\010\ufff1\027" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000\004\025" +
    "\276\001\002\000\012\005\062\010\300\021\060\022\061" +
    "\001\002\000\034\010\uffe5\015\304\027\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\001\002\000\036\004\301\010\uffe8\015" +
    "\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000" +
    "\004\010\302\001\002\000\004\015\303\001\002\000\032" +
    "\010\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002" +
    "\000\032\010\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\002\003\032\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\013\005\012\007\016\014\036\015\010\016" +
    "\037\017\017\020\030\021\011\022\021\023\022\024\032" +
    "\030\014\031\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\111\007\113\014\115" +
    "\015\110\016\037\017\017\020\030\021\011\022\021\023" +
    "\022\024\032\030\112\031\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\100\001\001\000\004\013" +
    "\072\001\001\000\004\013\071\001\001\000\004\013\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\107\005\012\007\016\014\036\015\010\016\037\017\017" +
    "\020\030\021\011\022\021\023\022\024\032\030\014\031" +
    "\023\001\001\000\034\005\111\007\113\014\115\015\110" +
    "\016\037\017\017\020\030\021\011\022\021\023\022\024" +
    "\032\030\112\031\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\132\005\012\007\016\014\036" +
    "\015\010\016\037\017\017\020\030\021\011\022\021\023" +
    "\022\024\032\030\014\031\023\001\001\000\034\005\111" +
    "\007\113\014\115\015\110\016\037\017\017\020\030\021" +
    "\011\022\021\023\022\024\032\030\112\031\023\001\001" +
    "\000\002\001\001\000\004\005\135\001\001\000\004\007" +
    "\146\001\001\000\002\001\001\000\004\013\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\152\005\012\007\016\014\036\015\010\016\037" +
    "\017\017\020\030\021\011\022\021\023\022\024\032\030" +
    "\014\031\023\001\001\000\034\005\111\007\113\014\115" +
    "\015\110\016\037\017\017\020\030\021\011\022\021\023" +
    "\022\024\032\030\112\031\023\001\001\000\002\001\001" +
    "\000\036\003\155\005\012\007\016\014\036\015\010\016" +
    "\037\017\017\020\030\021\011\022\021\023\022\024\032" +
    "\030\014\031\023\001\001\000\034\005\111\007\113\014" +
    "\115\015\110\016\037\017\017\020\030\021\011\022\021" +
    "\023\022\024\032\030\112\031\023\001\001\000\002\001" +
    "\001\000\004\007\167\001\001\000\002\001\001\000\004" +
    "\007\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\165\005\012\007\016\014\036\015\010\016\037" +
    "\017\017\020\030\021\011\022\021\023\022\024\032\030" +
    "\014\031\023\001\001\000\034\005\111\007\113\014\115" +
    "\015\110\016\037\017\017\020\030\021\011\022\021\023" +
    "\022\024\032\030\112\031\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\172\005" +
    "\012\007\016\014\036\015\010\016\037\017\017\020\030" +
    "\021\011\022\021\023\022\024\032\030\014\031\023\001" +
    "\001\000\034\005\111\007\113\014\115\015\110\016\037" +
    "\017\017\020\030\021\011\022\021\023\022\024\032\030" +
    "\112\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\176\005\012\007\016\014\036\015\010\016" +
    "\037\017\017\020\030\021\011\022\021\023\022\024\032" +
    "\030\014\031\023\001\001\000\034\005\111\007\113\014" +
    "\115\015\110\016\037\017\017\020\030\021\011\022\021" +
    "\023\022\024\032\030\112\031\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\213\001\001\000\002\001\001\000\036" +
    "\003\211\005\012\007\016\014\036\015\010\016\037\017" +
    "\017\020\030\021\011\022\021\023\022\024\032\030\014" +
    "\031\023\001\001\000\034\005\111\007\113\014\115\015" +
    "\110\016\037\017\017\020\030\021\011\022\021\023\022" +
    "\024\032\030\112\031\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\233\005\012" +
    "\007\016\014\036\015\010\016\037\017\017\020\030\021" +
    "\011\022\021\023\022\024\032\030\014\031\023\001\001" +
    "\000\034\005\111\007\113\014\115\015\110\016\037\017" +
    "\017\020\030\021\011\022\021\023\022\024\032\030\112" +
    "\031\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\237\005\012\007\016\014\036\015\010\016\037" +
    "\017\017\020\030\021\011\022\021\023\022\024\032\030" +
    "\014\031\023\001\001\000\034\005\111\007\113\014\115" +
    "\015\110\016\037\017\017\020\030\021\011\022\021\023" +
    "\022\024\032\030\112\031\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\243\001\001\000\004\007" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\265\001" +
    "\001\000\002\001\001\000\004\013\267\001\001\000\002" +
    "\001\001\000\004\013\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintacticojs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintacticojs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintacticojs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        public static Nodo raiz;
        
        public Nodo getRaiz(){
            return raiz;
        }
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintacticojs$actions {

  
  private final Sintacticojs parser;

  /** Constructor */
  CUP$Sintacticojs$actions(Sintacticojs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action_part00000000(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintacticojs$result;

      /* select the action based on the action number */
      switch (CUP$Sintacticojs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		RESULT = start_val;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintacticojs$parser.done_parsing();
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 parser.raiz = a; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= clase id llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		
                                                    Nodo superpadre = new Nodo("CLASE","",0,0);
                                                    Nodo padre = new Nodo("CLASE","",0,0);
                                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                        padre.AddHijo(new Nodo("llavea", b, bright, bleft));
                                                        padre.AddHijo(c); 
                                                        padre.AddHijo(new Nodo("llavec", g, gright, gleft));
                                                        superpadre.AddHijo(padre);
                                                        RESULT = superpadre;
                                                
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("CLASE",24, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                        padre.AddHijo(a);
                                                        padre.AddHijo(b); 
                                                        RESULT = padre;  
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= INSTRUCCIONES SENTENCIAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    padre.AddHijo(b); 
                                                    RESULT = padre;
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= SENTENCIAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    padre.AddHijo(b); 
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCIONES OPERACIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    padre.AddHijo(b); 
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= OPERACIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= INSTRUCCIONES METODOS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    padre.AddHijo(b); 
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= METODOS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                                    padre.AddHijo(a);
                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= id para id parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                            padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                            padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                            padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                            padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                            padre.AddHijo(new Nodo("llavea", e, eright, eleft));
                                                            padre.AddHijo(f);
                                                            padre.AddHijo(new Nodo("llavec", g, gright, gleft));
                                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= consi para id parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                padre.AddHijo(new Nodo("consi", a, aright, aleft));
                                                padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                RESULT = padre;
                                                    
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= consi para id mas O parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                        padre.AddHijo(new Nodo("consi", a, aright, aleft));  
                                                        padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                        padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                        padre.AddHijo(new Nodo("mas", d, dright, dleft));
                                                        padre.AddHijo(e);
                                                        padre.AddHijo(new Nodo("parc", f, fright, fleft));
                                                        padre.AddHijo(new Nodo("pyc", g, gright, gleft));
                                                        RESULT = padre;
                                                                    
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= consi para O mas O mas O mas O parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                                           padre.AddHijo(new Nodo("consi", a, aright, aleft));  
                                                                           padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                           padre.AddHijo(c);
                                                                           padre.AddHijo(new Nodo("mas", d, dright, dleft));
                                                                           padre.AddHijo(e);
                                                                           padre.AddHijo(new Nodo("mas", f, fright, fleft));
                                                                           padre.AddHijo(g);
                                                                           padre.AddHijo(new Nodo("mas", h, hright, hleft));
                                                                           padre.AddHijo(i);
                                                                           padre.AddHijo(new Nodo("parc", j, jright, jleft));
                                                                           padre.AddHijo(new Nodo("pyc", k, kright, kleft));
                                                                           RESULT = padre;
                                                                            
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= id para parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                                    padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                    padre.AddHijo(new Nodo("parc", c, cright, cleft));
                                                                    padre.AddHijo(new Nodo("llavea", d, dright, dleft));
                                                                    padre.AddHijo(e);
                                                                    padre.AddHijo(new Nodo("llavec", f, fright, fleft));
                                                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= id para parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("para", b, bright, bleft));
                                padre.AddHijo(new Nodo("parc", c, cright, cleft));
                                padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= id para parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("para", b, bright, bleft));
                                padre.AddHijo(new Nodo("parc", c, cright, cleft));
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= id para id coma id coma id coma id parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                                                                            padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                                                                            padre.AddHijo(new Nodo("parab", b, bright, bleft));
                                                                                                            padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                                                                            padre.AddHijo(new Nodo("coma", d, dright, dleft));
                                                                                                            padre.AddHijo(new Nodo("id", e, eright, eleft));
                                                                                                            padre.AddHijo(new Nodo("coma", f, fright, fleft));
                                                                                                            padre.AddHijo(new Nodo("id", g, gright, gleft));
                                                                                                            padre.AddHijo(new Nodo("coma", h, hright, hleft));
                                                                                                            padre.AddHijo(new Nodo("id", i, iright, ileft));   
                                                                                                            padre.AddHijo(new Nodo("parc", j, jright, jleft));
                                                                                                            padre.AddHijo(new Nodo("llavea", k, kright, kleft));
                                                                                                            padre.AddHijo(l);
                                                                                                            padre.AddHijo(new Nodo("llavec", m, mright, mleft));
                                                                                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= id para id menos O coma id coma id coma id parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FUNCION","",0,0);
                                                                                            padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                                                            padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                            padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                                                            padre.AddHijo(new Nodo("menos", d, dright, dleft));
                                                                                            padre.AddHijo(e);
                                                                                            padre.AddHijo(new Nodo("coma", f, fright, fleft));
                                                                                            padre.AddHijo(new Nodo("id", g, gright, gleft));
                                                                                            padre.AddHijo(new Nodo("coma", h, hright, hleft));
                                                                                            padre.AddHijo(new Nodo("id", i, iright, ileft));
                                                                                            padre.AddHijo(new Nodo("coma", j, jright, jleft));
                                                                                            padre.AddHijo(new Nodo("id", k, kright, kleft));
                                                                                            padre.AddHijo(new Nodo("parc", l, lright, lleft));
                                                                                            padre.AddHijo(new Nodo("pyc", m, mright, mleft));
                                                                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-12)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // O ::= deci 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("O","",0,0);
            padre.AddHijo(new Nodo("deci", a, aright, aleft)); 
            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // O ::= cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("O","",0,0); 
                padre.AddHijo(new Nodo("cadena", a, aright, aleft));
                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // O ::= digito 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("O","",0,0); 
                padre.AddHijo(new Nodo("digito", a, aright, aleft));
                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // O ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		    Nodo padre = new Nodo("O","",0,0);
                padre.AddHijo(new Nodo("id", a, aright, aleft));
                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("O",9, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= id igual O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                    padre.AddHijo(new Nodo("id", a, aright, aleft));
                                    padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                    padre.AddHijo(c);
                                    padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= vare id igual O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                                padre.AddHijo(new Nodo("vare", a, aright, aleft));
                                                padre.AddHijo(new Nodo("id", b, bright, bleft));
                                                padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                padre.AddHijo(d);
                                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= lete id igual O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                        padre.AddHijo(new Nodo("lete", a, aright, aleft));
                                        padre.AddHijo(new Nodo("id", b, bright, bleft));
                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                        padre.AddHijo(d);
                                        RESULT = padre;
                                        
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= conste id igual O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                        padre.AddHijo(new Nodo("conste", a, aright, aleft));
                                        padre.AddHijo(new Nodo("id", b, bright, bleft));
                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                        padre.AddHijo(d); 
                                        RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= vare id igual O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                                    padre.AddHijo(new Nodo("vare", a, aright, aleft));
                                                    padre.AddHijo(new Nodo("id", b, bright, bleft));
                                                    padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                    padre.AddHijo(d);
                                                    padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                    RESULT = padre; 
                                                    
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= lete id igual O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                            padre.AddHijo(new Nodo("lete", a, aright, aleft));
                                            padre.AddHijo(new Nodo("id", b, bright, bleft));
                                            padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                            padre.AddHijo(d);;
                                            padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= conste id igual O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                                    padre.AddHijo(new Nodo("conste", a, aright, aleft));
                                                    padre.AddHijo(new Nodo("id", b, bright, bleft));
                                                    padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                    padre.AddHijo(d);
                                                    padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                    RESULT = padre;
                                                     
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= lete id igual id mas id pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                padre.AddHijo(new Nodo("lete", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("id", b, bright, bleft));
                                                                padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                padre.AddHijo(new Nodo("id", d, dright, dleft));
                                                                padre.AddHijo(new Nodo("mas", e, eright, eleft));
                                                                padre.AddHijo(new Nodo("id", f, fright, fleft));
                                                                padre.AddHijo(new Nodo("pyc", g, gright, gleft));
                                                                RESULT = padre;
                                                                            
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= id igual id por id pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DECLARACION","",0,0);
                                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                        padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                                        padre.AddHijo(new Nodo("id", c, cright, cleft));
                                                        padre.AddHijo(new Nodo("por", d, dright, dleft));
                                                        padre.AddHijo(new Nodo("id", e, eright, eleft));
                                                        padre.AddHijo(new Nodo("pyc", f, fright, fleft));
                                                        RESULT = padre;
                                                                
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACIONES ::= id menos menos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                        padre.AddHijo(new Nodo("menos", b, bright, bleft));
                                        padre.AddHijo(new Nodo("menos", c, cright, cleft));
                                        RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACIONES ::= id mas mas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		Nodo padre = new Nodo("OPERACIONES","",0,0);
                                    padre.AddHijo(new Nodo("id", a, aright, aleft));
                                    padre.AddHijo(new Nodo("mas", b, bright, bleft));
                                    padre.AddHijo(new Nodo("mas", c, cright, cleft));
                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACIONES ::= id mas mas pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                    padre.AddHijo(new Nodo("id", a, aright, aleft));
                                    padre.AddHijo(new Nodo("mas", b, bright, bleft));
                                    padre.AddHijo(new Nodo("mas", c, cright, cleft));
                                    padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES ::= id id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("id", b, bright, bleft));
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES ::= id mayig O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("mayig", b, bright, bleft));
                                padre.AddHijo(c);
                                padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES ::= id igual id mas O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                padre.AddHijo(new Nodo("id", c, cright, cleft));
                                padre.AddHijo(new Nodo("mas", d, dright, dleft));
                                padre.AddHijo(e);
                                padre.AddHijo(new Nodo("pyc", f, fright, fleft));
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACIONES ::= id igual id mas O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                padre.AddHijo(new Nodo("id", a, aright, aleft));
                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                padre.AddHijo(new Nodo("id", c, cright, cleft));
                                padre.AddHijo(new Nodo("mas", d, dright, dleft));
                                padre.AddHijo(e);
                                RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACIONES ::= id mayig O and id menig O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                                        padre.AddHijo(new Nodo("mayig", b, bright, bleft));
                                                        padre.AddHijo(c);
                                                        padre.AddHijo(new Nodo("and", d, dright, dleft));
                                                        padre.AddHijo(new Nodo("id", e, eright, eleft));
                                                        padre.AddHijo(new Nodo("menig", f, fright, fleft));
                                                        padre.AddHijo(g);
                                                        RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACIONES ::= id menig O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                            padre.AddHijo(new Nodo("id", a, aright, aleft));
                                            padre.AddHijo(new Nodo("menig", b, bright, bleft));
                                            padre.AddHijo(c);
                                            padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACIONES ::= id menig O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                            padre.AddHijo(new Nodo("id", a, aright, aleft));
                                            padre.AddHijo(new Nodo("menig", b, bright, bleft));
                                            padre.AddHijo(c);
                                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACIONES ::= id iguall O 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                        padre.AddHijo(new Nodo("iguall", b, bright, bleft));
                                        padre.AddHijo(c);
                                        RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACIONES ::= id menor O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                        padre.AddHijo(new Nodo("id", a, aright, aleft));
                                        padre.AddHijo(new Nodo("menor", b, bright, bleft));
                                        padre.AddHijo(c);
                                        padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                        RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACIONES ::= id mayor O pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("OPERACIONES","",0,0);
                                    padre.AddHijo(new Nodo("id", a, aright, aleft));
                                    padre.AddHijo(new Nodo("mayor", b, bright, bleft));
                                    padre.AddHijo(c);
                                    padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                    RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= FORMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= IFMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= IFELSEMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= WHILEMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= MIXELSEMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= DOWHILEMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= SWITCHMETOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= ELSEMETODE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("SENTENCIAS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre; 
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",22, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FORMETOD ::= fory para DECLARACION OPERACIONES OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("FORMETOD","",0,0);
                                                                                    padre.AddHijo(new Nodo("fory", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(d);
                                                                                    padre.AddHijo(e);
                                                                                    padre.AddHijo(new Nodo("parc", f, fright, fleft));
                                                                                    padre.AddHijo(new Nodo("llavea", g, gright, gleft));
                                                                                    padre.AddHijo(h);
                                                                                    padre.AddHijo(new Nodo("llavec", i, iright, ileft));
                                                                                    RESULT = padre;                                                                                  

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("FORMETOD",12, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFMETOD ::= ife para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("IFMETOD","",0,0);   
                                                                                    padre.AddHijo(new Nodo("ife", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("llavea", e, eright, eleft));
                                                                                    padre.AddHijo(f);
                                                                                    padre.AddHijo(new Nodo("llavec", g, gright, gleft));
                                                                                    RESULT = padre;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFMETOD",13, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFELSEMETOD ::= ife para OPERACIONES parc llavea llavec elsi llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("IFELSEMETOD","",0,0);
                                                                                    padre.AddHijo(new Nodo("ife", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("llavea", e, eright, eleft));
                                                                                    padre.AddHijo(new Nodo("llavec", f, gright, fleft));
                                                                                    padre.AddHijo(new Nodo("elsi", g, hright, gleft));
                                                                                    padre.AddHijo(new Nodo("llavea", h, hright, hleft));
                                                                                    padre.AddHijo(i);
                                                                                    padre.AddHijo(new Nodo("llavec", j, jright, jleft));
                                                                                    RESULT = padre;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("IFELSEMETOD",14, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MIXELSEMETOD ::= ife elsi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("MIXELSEMETOD","",0,0);
                                                                                            padre.AddHijo(new Nodo("ife", a, aright, aleft));
                                                                                            padre.AddHijo(new Nodo("elsi", b, bright, bleft));
                                                                                            padre.AddHijo(new Nodo("para", c, cright, cleft));
                                                                                            padre.AddHijo(d);
                                                                                            padre.AddHijo(new Nodo("parc", e, eright, eleft));
                                                                                            padre.AddHijo(new Nodo("llavea", f, fright, fleft));
                                                                                            padre.AddHijo(g);
                                                                                            padre.AddHijo(new Nodo("llavec", h, hright, hleft));
                                                                                            RESULT = padre;
                                                                                            
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("MIXELSEMETOD",16, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILEMETOD ::= whi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("WHILEMETOD","",0,0);
                                                                                    padre.AddHijo(new Nodo("whi", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("llavea", e, eright, eleft));
                                                                                    padre.AddHijo(f);
                                                                                    padre.AddHijo(new Nodo("llavec", g, gright, gleft));
                                                                                    RESULT = padre;
                                                                                    
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("WHILEMETOD",15, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DOWHILEMETOD ::= du llavea DECLARACION OPERACIONES llavec whi para OPERACIONES parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("DOWHILEMETOD","",0,0);
                                                                                                            padre.AddHijo(new Nodo("du", a, aright, aleft));
                                                                                                            padre.AddHijo(new Nodo("llavea", b, bright, bleft));
                                                                                                            padre.AddHijo(c);
                                                                                                            padre.AddHijo(d);
                                                                                                            padre.AddHijo(new Nodo("llavec", e, eright, eleft));
                                                                                                            padre.AddHijo(new Nodo("whi", f, fright, fleft));
                                                                                                            padre.AddHijo(new Nodo("para", g, gright, gleft));
                                                                                                            padre.AddHijo(h);
                                                                                                            padre.AddHijo(new Nodo("parc", i, iright, ileft));
                                                                                                            padre.AddHijo(new Nodo("pyc", j, jright, jleft));
                                                                                                            RESULT = padre;

              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("DOWHILEMETOD",17, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-9)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SWITCHMETOD ::= swi para OPERACIONES parc llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		  Nodo padre = new Nodo("SWITCHMETOD","",0,0);
                                                                                    padre.AddHijo(new Nodo("swi", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));     
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("llavea", e, eright, eleft));
                                                                                    padre.AddHijo(f);
                                                                                    padre.AddHijo(new Nodo("llavec",g , gright, gleft));
                                                                                    RESULT = padre;
                                                                                    
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("SWITCHMETOD",18, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-6)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELSEMETODE ::= elsi llavea INSTRUCCIONES llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintacticojs$stack.peek()).value;
		 Nodo padre = new Nodo("ELSEMETODE","",0,0);
                                                padre.AddHijo(c);
                                                padre.AddHijo(new Nodo("elsi", a, aright, aleft));
                                                padre.AddHijo(new Nodo("llavea", b, bright, bleft));
                                                padre.AddHijo(new Nodo("llavec", d, dright, dleft));
                                                RESULT = padre;
                                                
              CUP$Sintacticojs$result = parser.getSymbolFactory().newSymbol("ELSEMETODE",23, ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.elementAt(CUP$Sintacticojs$top-3)), ((java_cup.runtime.Symbol)CUP$Sintacticojs$stack.peek()), RESULT);
            }
          return CUP$Sintacticojs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintacticojs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintacticojs$do_action(
    int                        CUP$Sintacticojs$act_num,
    java_cup.runtime.lr_parser CUP$Sintacticojs$parser,
    java.util.Stack            CUP$Sintacticojs$stack,
    int                        CUP$Sintacticojs$top)
    throws java.lang.Exception
    {
              return CUP$Sintacticojs$do_action_part00000000(
                               CUP$Sintacticojs$act_num,
                               CUP$Sintacticojs$parser,
                               CUP$Sintacticojs$stack,
                               CUP$Sintacticojs$top);
    }
}

}
