/* The following code was generated by JFlex 1.6.1 */

/*--------------------------------------------------
 ------------  1ra Area: Codigo de Usuario ---------
 ---------------------------------------------------*/

//------> Paquetes,importaciones
package analizadores;
import java_cup.runtime.*;
import javax.swing.JOptionPane;

/*----------------------------------------------------------
  ------------  2da Area: Opciones y Declaraciones ---------
  ----------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/ana_lexico.jflex</tt>
 */
public class Analizador_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 62,  3, 63, 62, 62,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    62,  0,  2,  0,  0,  0,  0,  0, 13, 14,  8,  6, 19,  7,  0,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 18, 10,  0, 15,  0,  0, 
     0, 40, 38, 48, 20, 22, 24, 32, 60, 26, 52,  0, 34,  0, 28, 36, 
    44,  0, 30, 42, 46, 50, 56,  0, 54, 58,  0, 11,  0, 12,  0,  5, 
     0, 41, 39, 49, 21, 23, 25, 33, 61, 27, 53,  4, 35,  4, 29, 37, 
    45,  4, 31, 43, 47, 51, 57,  4, 55, 59,  4, 16,  0, 17,  0,  0, 
     0,  0,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\4\1\1\1\4"+
    "\1\1\1\4\1\1\1\4\1\1\1\4\1\1\1\4"+
    "\1\1\1\4\2\0\1\4\2\0\2\4\2\0\2\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\23\1\0\1\4\2\0\2\4\2\0\2\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\24\1\0\1\24\1\4\2\0\2\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\25\2\26\1\0"+
    "\1\4\1\0\1\4\2\27\2\0\2\4\2\30\1\31"+
    "\1\32\1\31\1\32\2\33\1\0\1\4\3\0\3\4"+
    "\1\0\1\4\3\0\3\4\1\0\1\4\2\0\1\34"+
    "\2\4\1\34\1\0\1\4\2\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\1\0\1\35\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\36\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\2\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u0140\0\u0180\0\u01c0\0\u0200"+
    "\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400"+
    "\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\100\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\100\0\u0e80\0\u0100\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\100\0\u0100\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\100\0\u0100\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\100\0\u0100\0\100\0\100\0\u0100\0\u0100"+
    "\0\100\0\u0100\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\100\0\u2000"+
    "\0\u2040\0\u0100\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\100\0\u2440\0\u0100\0\u2480\0\u24c0\0\u2500\0\u2540"+
    "\0\100\0\u0100\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0"+
    "\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\100\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\31\1\32\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\33\1\34\1\35\1\36\1\2\1\6\1\37\1\40"+
    "\1\2\1\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\41\1\42\1\2\1\6\1\2\1\6\1\5\102\0"+
    "\1\3\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\0\2\43\2\0"+
    "\74\43\1\0\1\6\2\0\2\6\17\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\30\0"+
    "\2\44\51\0\1\6\2\0\2\6\17\0\1\6\1\44"+
    "\1\45\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\66\0"+
    "\2\46\2\0\2\47\7\0\1\6\2\0\2\6\17\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\46"+
    "\1\50\1\0\1\6\1\47\1\51\1\0\1\6\1\0"+
    "\1\6\30\0\2\52\6\0\2\53\41\0\1\6\2\0"+
    "\2\6\17\0\1\6\1\52\1\54\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\53\1\55\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\40\0\2\56\41\0\1\6\2\0"+
    "\2\6\17\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\56\1\57\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\60\0\2\60\21\0\1\6\2\0"+
    "\2\6\17\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\60\1\61\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\34\0\2\62\45\0\1\6\2\0"+
    "\2\6\17\0\1\6\1\0\1\6\1\0\1\6\1\62"+
    "\1\63\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\52\0\2\64\27\0\1\6\2\0"+
    "\2\6\17\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\64\1\65\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\43\1\66\1\0\74\43"+
    "\30\0\2\67\47\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\67\1\70\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\30\0\2\71\120\0\2\72\27\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\71\1\73\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\72\1\74\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\36\0\2\75\112\0\2\76\27\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\75\1\77\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\76\1\100\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\62\0\2\101\17\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\101\1\102\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\103\41\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\103\1\104\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\60\0\2\105\21\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\105\1\106\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\44\0\2\107\35\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\107\1\110\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\34\0\2\111\45\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\111\1\112\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\70\0\2\113\52\0\2\114\35\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\113\1\115\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\114\1\116\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\30\0\2\117\100\0\2\120\47\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\117\1\121\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\120\1\122\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\76\0\2\123\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\123\1\124"+
    "\34\0\2\125\45\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\125\1\126\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\64\0\2\127\15\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\127\1\130\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\46\0\2\131\33\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\131\1\132"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\36\0\2\133\43\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\133\1\134"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\64\0\2\135\15\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\135\1\136\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\137\72\0\2\140\45\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\137\1\141\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\140\1\142\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\34\0\2\143\45\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\143\1\144\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\36\0\2\145\43\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\145\1\146"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\44\0\2\147\35\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\147\1\150\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\151\41\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\151\1\152\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\34\0\2\153\45\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\153\1\154\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\52\0\2\155\27\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\155\1\156\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\52\0\2\157\106\0\2\160\17\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\157\1\161\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\160\1\162\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\72\0\2\163\7\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\163\1\164\1\0\1\6\1\0\1\6"+
    "\42\0\2\165\37\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\165\1\166\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\46\0\2\167\33\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\167\1\170"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\30\0\2\171\51\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\171\1\172\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\173\41\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\173\1\174\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\175\41\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\175\1\176\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\40\0\2\177\110\0\2\200\27\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\177\1\201\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\3\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\200\1\202\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\46\0\2\203\33\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\203\1\204"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\70\0\2\205\2\0\2\206\5\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\205\1\207\1\0\1\6\1\206\1\210"+
    "\1\0\1\6\54\0\2\211\25\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\211\1\212"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\42\0\2\213\37\0\1\6\2\0\2\6"+
    "\17\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\213\1\214\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\40\0\2\215\106\0\2\216\4\0\2\217"+
    "\23\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\215\1\220"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\216\1\221\1\0\1\6"+
    "\1\0\1\6\1\217\1\222\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\44\0\2\223\35\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\223\1\224\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\30\0\2\225\120\0\2\226"+
    "\60\0\2\227\45\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\225\1\230\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\226\1\231\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\227\1\232\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\46\0\2\233\33\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\233\1\234\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\56\0\2\235\60\0\2\236"+
    "\66\0\2\237\51\0\1\6\2\0\2\6\17\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\235\1\240"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\3\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\236\1\241"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\237\1\242\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\50\0\2\243\31\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\243\1\244\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\46\0\2\245\70\0\2\246"+
    "\41\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\245\1\247\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\246\1\250\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\52\0\2\251\27\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\251\1\252"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\40\0\2\253\110\0\2\254"+
    "\27\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\253\1\255"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\254\1\256"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\44\0\2\257\35\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\257\1\260\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\60\0\2\261\72\0\2\262"+
    "\25\0\1\6\2\0\2\6\17\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\261\1\263"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\3\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\262\1\264\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\30\0\2\265\51\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\265\1\266\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\30\0\2\267\51\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\267\1\270\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\54\0\2\271\25\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\271\1\272\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\30\0\2\273\51\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\273\1\274\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\54\0\2\275\25\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\275\1\276\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\60\0\2\277\21\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\277\1\300\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\52\0\2\301\27\0\1\6"+
    "\2\0\2\6\17\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\301\1\302"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\26\0\2\303\53\0\1\6"+
    "\2\0\2\6\16\0\1\303\1\304\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\34\0\2\305\45\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\305\1\306\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\54\0\2\307\25\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\307\1\310\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\60\0\2\311\21\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\311\1\312\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\34\0\2\313\45\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\313\1\314\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\62\0\2\315\17\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\315"+
    "\1\316\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\46\0\2\317\33\0"+
    "\1\6\2\0\2\6\17\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\317\1\320\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\16\11\16\1\2\0"+
    "\1\1\2\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\2\0\2\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\11\3\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\2\0\2\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\0\1\1\3\0\3\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\2\0\1\11\3\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\11\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico " + yytext() + "Linea: " + yyline + "Columna: " + yycolumn);
            }
          case 32: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" digito"); return new Symbol(Simbolos.digito, yycolumn, yyline, yytext());
            }
          case 33: break;
          case 3: 
            { /* Espacios en blanco, se ignoran */
            }
          case 34: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" id"); return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 35: break;
          case 5: 
            { System.out.println("Reconocio "+yytext()+" mas"); return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 36: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" menos"); return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 37: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" por"); return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 38: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" div"); return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 39: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" pyc"); return new Symbol(Simbolos.pyc, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" cora"); return new Symbol(Simbolos.cora, yycolumn, yyline, yytext());
            }
          case 41: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" corc"); return new Symbol(Simbolos.corc, yycolumn, yyline, yytext());
            }
          case 42: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" para"); return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" parc"); return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 44: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Simbolos.igual, yycolumn, yyline,yytext());
            }
          case 45: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" llavea"); return new Symbol(Simbolos.llavea, yycolumn, yyline,yytext());
            }
          case 46: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" llavec"); return new Symbol(Simbolos.llavec, yycolumn, yyline,yytext());
            }
          case 47: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" dosp"); return new Symbol(Simbolos.dosp, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" ejex"); return new Symbol(Simbolos.ejex, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" str"); return new Symbol(Simbolos.str, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" tit"); return new Symbol(Simbolos.tit, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" eval"); return new Symbol(Simbolos.eval, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" arch"); return new Symbol(Simbolos.arch, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" titx"); return new Symbol(Simbolos.titx, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" tity"); return new Symbol(Simbolos.tity, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" val"); return new Symbol(Simbolos.val, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" pie"); return new Symbol(Simbolos.pie, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" graf"); return new Symbol(Simbolos.graf, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" glob"); return new Symbol(Simbolos.glob, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" esta"); return new Symbol(Simbolos.esta, yycolumn, yyline, yytext());
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
