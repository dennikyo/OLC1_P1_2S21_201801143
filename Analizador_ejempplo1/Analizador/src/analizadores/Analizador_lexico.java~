/* The following code was generated by JFlex 1.6.1 */

/*--------------------------------------------------
 ------------  1ra Area: Codigo de Usuario ---------
 ---------------------------------------------------*/

//------> Paquetes,importaciones
package analizadores;
import java_cup.runtime.*;
import javax.swing.JOptionPane;

/*----------------------------------------------------------
  ------------  2da Area: Opciones y Declaraciones ---------
  ----------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/ana_lexico.jflex</tt>
 */
public class Analizador_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  2, 44, 43, 43,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    43,  0,  1,  0,  0,  0,  0,  0, 13, 14,  8,  6, 19,  7,  5,  9, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 18, 10,  0, 15,  0,  0, 
     0, 31, 30, 36, 20, 21, 22, 27, 42, 24, 38,  4, 28,  4, 25, 29, 
    34,  4, 26, 33, 35, 37, 40,  4, 39, 41,  4, 11,  4, 12,  4,  4, 
     4, 31, 30, 36, 20, 21, 22, 27, 42, 24, 38,  4, 28,  4, 25, 29, 
    34,  4, 26, 33, 35, 37, 40,  4, 39, 41,  4, 16,  0, 17,  0,  0, 
     0,  0,  0,  0,  0, 44,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\4\3\1\1\3\3\1\0\1\22\6\3"+
    "\1\0\1\3\1\0\2\3\1\23\6\3\1\0\1\3"+
    "\1\0\2\3\1\0\2\3\1\24\3\3\1\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\25\1\3"+
    "\1\0\1\3\1\0\1\3\2\26\2\27\1\3\1\0"+
    "\2\3\1\0\1\3\2\30\1\31\1\32\1\31\1\32"+
    "\2\33\1\0\2\3\2\0\2\3\1\0\2\3\2\0"+
    "\2\3\1\0\2\3\1\0\1\34\1\3\1\34\1\0"+
    "\2\3\1\0\1\3\1\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\35\1\0\2\3\2\36\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\2\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\264\0\55\0\55"+
    "\0\55\0\55\0\55\0\264\0\264\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\341\0\u010e\0\u013b\0\u0168"+
    "\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0"+
    "\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438"+
    "\0\u0465\0\55\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\264\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\264\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\55\0\264"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\55\0\264\0\55\0\55\0\264\0\264\0\55\0\264"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u1059\0\55\0\u1086\0\264\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\55\0\264\0\u12fc\0\u1329\0\u1356\0\55"+
    "\0\264\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9"+
    "\0\u1626\0\u1653\0\u1680\0\u16ad\0\55\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\6\1\2"+
    "\3\6\1\27\3\6\1\30\1\31\1\32\1\6\1\33"+
    "\4\6\1\34\2\6\1\4\56\0\1\35\2\0\52\35"+
    "\3\0\1\5\1\6\1\36\5\0\2\6\7\0\3\6"+
    "\1\0\10\6\1\0\12\6\5\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\10\6\1\0\12\6\5\0\2\6"+
    "\6\0\2\6\7\0\1\6\1\37\1\6\1\0\5\6"+
    "\1\40\2\6\1\0\12\6\5\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\10\6\1\0\5\6\1\41\4\6"+
    "\5\0\2\6\6\0\2\6\7\0\1\6\1\42\1\6"+
    "\1\0\2\6\1\43\5\6\1\0\12\6\5\0\2\6"+
    "\6\0\2\6\7\0\3\6\1\0\2\6\1\44\5\6"+
    "\1\0\12\6\45\0\1\45\14\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\10\6\1\0\2\6\1\46\7\6"+
    "\5\0\2\6\6\0\2\6\7\0\3\6\1\47\1\50"+
    "\7\6\1\0\12\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\7\6\1\51\1\0\12\6\2\0\1\35"+
    "\1\52\1\0\52\35\3\0\1\36\54\0\2\6\6\0"+
    "\2\6\7\0\2\6\1\53\1\0\10\6\1\0\12\6"+
    "\5\0\2\6\6\0\2\6\7\0\3\6\1\0\10\6"+
    "\1\0\4\6\1\54\5\6\5\0\2\6\6\0\2\6"+
    "\7\0\1\6\1\55\1\6\1\0\10\6\1\0\12\6"+
    "\5\0\2\6\6\0\2\6\7\0\3\6\1\0\1\6"+
    "\1\56\6\6\1\0\12\6\5\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\7\6\1\57\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\10\6\1\0"+
    "\3\6\1\60\6\6\34\0\1\61\25\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\2\6\1\62\5\6\1\0"+
    "\12\6\45\0\1\63\14\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\10\6\1\0\2\6\1\64\7\6\5\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\4\6\1\65"+
    "\3\6\1\0\12\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\66\1\67\7\6\1\0\12\6\5\0\2\6"+
    "\6\0\2\6\7\0\3\6\1\0\6\6\1\70\1\6"+
    "\1\0\12\6\5\0\2\6\6\0\2\6\7\0\3\6"+
    "\1\0\10\6\1\0\6\6\1\71\3\6\5\0\2\6"+
    "\6\0\2\6\7\0\1\6\1\72\1\6\1\0\10\6"+
    "\1\0\12\6\5\0\2\6\6\0\2\6\7\0\2\6"+
    "\1\73\1\0\10\6\1\0\12\6\5\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\10\6\1\0\11\6\1\74"+
    "\31\0\2\75\27\0\2\6\6\0\2\6\7\0\3\6"+
    "\1\75\1\76\7\6\1\0\12\6\47\0\1\77\12\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\10\6\1\0"+
    "\4\6\1\100\5\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\5\6\1\101\2\6\1\0\12\6\33\0"+
    "\1\102\26\0\2\6\6\0\2\6\7\0\3\6\1\0"+
    "\1\6\1\103\6\6\1\0\12\6\5\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\4\6\1\104\3\6\1\0"+
    "\12\6\5\0\2\6\6\0\2\6\7\0\3\6\1\0"+
    "\2\6\1\105\5\6\1\0\12\6\5\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\106\1\107\7\6\1\0\12\6"+
    "\5\0\2\6\6\0\2\6\7\0\3\6\1\110\1\111"+
    "\7\6\1\0\12\6\33\0\1\112\26\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\1\6\1\113\6\6\1\0"+
    "\12\6\36\0\1\114\23\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\4\6\1\115\3\6\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\2\6\1\116"+
    "\5\6\1\0\12\6\31\0\2\117\27\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\117\1\120\7\6\1\0\12\6"+
    "\5\0\2\6\6\0\2\6\7\0\1\6\1\121\1\6"+
    "\1\0\10\6\1\0\12\6\5\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\7\6\1\122\1\0\12\6\46\0"+
    "\1\123\13\0\2\6\6\0\2\6\7\0\3\6\1\0"+
    "\10\6\1\0\3\6\1\124\6\6\52\0\1\125\7\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\10\6\1\0"+
    "\7\6\1\126\2\6\35\0\1\127\24\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\3\6\1\130\4\6\1\0"+
    "\12\6\37\0\1\131\22\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\5\6\1\132\2\6\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\1\6\1\133\1\6\1\0"+
    "\10\6\1\0\12\6\34\0\1\134\25\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\2\6\1\135\5\6\1\0"+
    "\12\6\5\0\2\6\6\0\2\6\7\0\3\6\1\0"+
    "\2\6\1\136\5\6\1\0\12\6\41\0\1\137\20\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\7\6\1\140"+
    "\1\0\12\6\37\0\1\141\22\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\5\6\1\142\2\6\1\0\12\6"+
    "\51\0\1\143\1\0\1\144\6\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\10\6\1\0\6\6\1\145\1\6"+
    "\1\146\1\6\5\0\2\6\6\0\2\6\7\0\3\6"+
    "\1\0\10\6\1\147\1\150\11\6\35\0\1\151\24\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\3\6\1\152"+
    "\4\6\1\0\12\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\2\6\1\153\5\6\1\0\12\6\40\0"+
    "\1\154\3\0\1\155\15\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\6\6\1\156\1\6\1\0\1\6\1\157"+
    "\10\6\36\0\1\160\23\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\4\6\1\161\3\6\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\1\6\1\162\1\6\1\0"+
    "\10\6\1\0\12\6\41\0\1\163\44\0\2\164\27\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\7\6\1\165"+
    "\1\0\12\6\5\0\2\6\6\0\2\6\7\0\3\6"+
    "\1\164\1\166\7\6\1\0\12\6\37\0\1\167\22\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\5\6\1\170"+
    "\2\6\1\0\12\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\10\6\1\0\1\6\1\171\10\6\34\0"+
    "\1\172\47\0\1\173\32\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\2\6\1\174\5\6\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\1\6\1\175\1\6\1\0"+
    "\10\6\1\0\12\6\40\0\1\176\21\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\6\6\1\177\1\6\1\0"+
    "\12\6\5\0\2\6\6\0\2\6\7\0\3\6\1\0"+
    "\5\6\1\200\2\6\1\0\12\6\34\0\1\201\25\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\2\6\1\202"+
    "\5\6\1\0\12\6\41\0\1\203\20\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\7\6\1\204\1\0\12\6"+
    "\5\0\2\6\6\0\2\6\7\0\3\6\1\0\2\6"+
    "\1\205\5\6\1\0\12\6\41\0\1\206\20\0\2\6"+
    "\6\0\2\6\7\0\3\6\1\0\7\6\1\207\1\0"+
    "\12\6\36\0\1\210\23\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\4\6\1\211\3\6\1\0\12\6\5\0"+
    "\2\6\6\0\2\6\7\0\3\6\1\0\10\6\1\0"+
    "\2\6\1\212\7\6\42\0\2\213\16\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\10\6\1\213\1\214\11\6"+
    "\27\0\1\215\32\0\2\6\6\0\2\6\7\0\1\6"+
    "\1\216\1\6\1\0\10\6\1\0\12\6\5\0\2\6"+
    "\6\0\2\6\7\0\1\6\1\217\1\6\1\0\10\6"+
    "\1\0\12\6\42\0\2\220\16\0\2\6\6\0\2\6"+
    "\7\0\3\6\1\0\10\6\1\220\1\221\11\6\5\0"+
    "\2\6\6\0\2\6\7\0\1\6\1\222\1\6\1\0"+
    "\10\6\1\0\12\6\5\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\10\6\1\223\1\224\11\6\45\0\1\225"+
    "\14\0\2\6\6\0\2\6\7\0\3\6\1\0\10\6"+
    "\1\0\2\6\1\226\7\6\41\0\1\227\20\0\2\6"+
    "\6\0\2\6\7\0\3\6\1\0\7\6\1\230\1\0"+
    "\12\6\26\0\1\231\33\0\2\6\6\0\2\6\7\0"+
    "\1\232\2\6\1\0\10\6\1\0\12\6\31\0\2\233"+
    "\27\0\2\6\6\0\2\6\7\0\3\6\1\233\1\234"+
    "\7\6\1\0\12\6\42\0\2\235\16\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\10\6\1\235\1\236\11\6"+
    "\45\0\1\237\14\0\2\6\6\0\2\6\7\0\3\6"+
    "\1\0\10\6\1\0\2\6\1\240\7\6\31\0\2\241"+
    "\27\0\2\6\6\0\2\6\7\0\3\6\1\241\1\242"+
    "\7\6\1\0\12\6\46\0\1\243\13\0\2\6\6\0"+
    "\2\6\7\0\3\6\1\0\10\6\1\0\3\6\1\244"+
    "\6\6\37\0\1\245\22\0\2\6\6\0\2\6\7\0"+
    "\3\6\1\0\5\6\1\246\2\6\1\0\12\6\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\5\11\2\1\7\11"+
    "\10\1\1\0\7\1\1\0\1\1\1\0\2\1\1\11"+
    "\6\1\1\0\1\1\1\0\2\1\1\0\6\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\4\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\2\11\2\1\1\11\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\0\1\11\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico " + yytext() + "Linea: " + yyline + "Columna: " + yycolumn);
            }
          case 32: break;
          case 2: 
            { /* Espacios en blanco, se ignoran */
            }
          case 33: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" id"); return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 34: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" mas"); return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 35: break;
          case 5: 
            { System.out.println("Reconocio "+yytext()+" menos"); return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 36: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" por"); return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 37: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" div"); return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 38: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" pyc"); return new Symbol(Simbolos.pyc, yycolumn, yyline, yytext());
            }
          case 39: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" cora"); return new Symbol(Simbolos.cora, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" corc"); return new Symbol(Simbolos.corc, yycolumn, yyline, yytext());
            }
          case 41: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" para"); return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 42: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" parc"); return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Simbolos.igual, yycolumn, yyline,yytext());
            }
          case 44: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" llavea"); return new Symbol(Simbolos.llavea, yycolumn, yyline,yytext());
            }
          case 45: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" llavec"); return new Symbol(Simbolos.llavec, yycolumn, yyline,yytext());
            }
          case 46: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" dosp"); return new Symbol(Simbolos.dosp, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" deci"); return new Symbol(Simbolos.deci, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" ejex"); return new Symbol(Simbolos.ejex, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" dou"); return new Symbol(Simbolos.dou, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" str"); return new Symbol(Simbolos.str, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" tit"); return new Symbol(Simbolos.tit, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" arch"); return new Symbol(Simbolos.arch, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" titx"); return new Symbol(Simbolos.titx, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" tity"); return new Symbol(Simbolos.tity, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" val"); return new Symbol(Simbolos.val, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" pie"); return new Symbol(Simbolos.pie, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" graf"); return new Symbol(Simbolos.graf, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" glob"); return new Symbol(Simbolos.glob, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" esta"); return new Symbol(Simbolos.esta, yycolumn, yyline, yytext());
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
